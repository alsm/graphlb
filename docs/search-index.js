crystal_doc_search_index_callback({"repository_name":"github.com/mettuaditya/graphlb","body":"![Build Status](https://travis-ci.org/TobiasGSmollett/crystalg.svg?branch=master)\n# graphlb\ngraphlb is a crystal library which contains all the graph datastructures and algorithms in crystal-lang.\n\n# Installation\n\nClone repository manually:\n\n```sh\n$ git clone https://github.com/mettuaditya/graphlb && cd graphlb/\n```\nor  add this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  crystalg:\n    github: mettuaditya/graphlb\n```\n\nThen run `crystal deps`\n\n\n## To Do\n\n* Algorithms\n  * Bellman-ford \n  * Edmonds-karp\n  * Prims\n  * Breadth-first-search\n  * Depth-first-search\n  * Strongly Connected Components\n  \n* Data-Structues\n  * Binary-search-tree\n  * radix-tree\n  * RB-tree\n\n## Contributors\n\n- [mettuaditya](https://github.com/mettuaditya) Aditya Mettu - creator, maintainer\n","program":{"html_id":"github.com/mettuaditya/graphlb/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"locations":[],"repository_name":"github.com/mettuaditya/graphlb","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"extended_modules":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb","path":"Graphlb.html","kind":"module","full_name":"Graphlb","name":"Graphlb","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/data_structures/nodes.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr"},{"filename":"graphlb.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","path":"Graphlb/Algorithms.html","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/algorithms/bellman_ford.cr","line_number":11,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr"},{"filename":"graphlb/algorithms/breadth_first_search.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/breadth_first_search.cr"},{"filename":"graphlb/algorithms/depth_first_search.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/depth_first_search.cr"},{"filename":"graphlb/algorithms/dijkstras.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr"},{"filename":"graphlb/spanning_trees/prims.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb","kind":"module","full_name":"Graphlb","name":"Graphlb"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/BellmanFord","path":"Graphlb/Algorithms/BellmanFord.html","kind":"class","full_name":"Graphlb::Algorithms::BellmanFord","name":"BellmanFord","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/bellman_ford.cr","line_number":19,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Bellman Ford's algorithm is an algorithm for finding\nthe shortest paths between nodes in a graph,\n\nGiven a graph and source vertex Bellman Fords algorithm finds\nthe shortest distance from the source vertex to all other\nvertices in the graph.\nIt also finds wheather a negative cycle is prsent in a graph or not","summary":"<p>Bellman Ford's algorithm is an algorithm for finding the shortest paths between nodes in a graph,</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"path_constructor(prev,source,target)-instance-method","html_id":"path_constructor(prev,source,target)-instance-method","name":"path_constructor","doc":"constructs a path from source vertex to target vertex\nReturns the shortest path, if it exists, as an Array of vertices.","summary":"<p>constructs a path from source vertex to target vertex Returns the shortest path, if it exists, as an Array of vertices.</p>","abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(prev, source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr#L64","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr#L64","def":{"name":"path_constructor","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = target.name\nwhile ((!temp.nil?) && (temp != source.name))\n  set.insert(0, temp)\n  temp = prev[temp]\nend\nset.insert(0, source.name)\nreturn set\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"\nreturns two hashes, one contains the distance is vetex from the source\nnode whereas, other hash conntains the information about the previous\nnodes for vertices in the graph\n","summary":"<p>returns two hashes, one contains the distance is vetex from the source node whereas, other hash conntains the information about the previous nodes for vertices in the graph </p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr#L25","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/bellman_ford.cr#L25","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertex_set.size\nwhile i < size\n  dist[vertex_set[i]] = Float64::INFINITY\n  prev[vertex_set[i].name] = nil\n  i = i + 1\nend\ndist[source] = 0.0\ni = 1\nwhile i < (size - 1)\n  vertex_set.each do |j|\n    j.edges.keys.each do |neighbour|\n      temp = dist[j] + j.edges[neighbour]\n      if temp < dist[neighbour]\n        dist[neighbour] = temp\n        prev[neighbour.name] = j.name\n      end\n    end\n  end\n  i = i + 1\nend\nvertex_set.each do |j|\n  j.edges.keys.each do |neighbour|\n    temp = dist[j] + j.edges[neighbour]\n    if temp < dist[neighbour]\n      raise(\"graph contains negative cycle\")\n    end\n  end\nend\nreturn {dist, prev}\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/BFS","path":"Graphlb/Algorithms/BFS.html","kind":"class","full_name":"Graphlb::Algorithms::BFS","name":"BFS","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/breadth_first_search.cr","line_number":13,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/breadth_first_search.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Breadth first Search is an algorithm for finding\nall the vertices that are reachable from  a source,\nvertex in a graph.\n\nGiven a graph and source vertex Breadth First Search finds\nthe vertices that are reachable from the source vertex\nin a graph\n","summary":"<p>Breadth first Search is an algorithm for finding all the vertices that are reachable from  a source, vertex in a graph.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"returns a list of all vertices that are reachable from the\nsource vertices.\n","summary":"<p>returns a list of all vertices that are reachable from the source vertices.</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/breadth_first_search.cr#L18","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/breadth_first_search.cr#L18","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  dist[vertices[i]] = Float64::INFINITY\n  prev[vertices[i].name] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\ndist[source] = 0.0\nprev[source.name] = source.name\nvisitedQueue = Queue(String).new\nqueue = Queue(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in Queue\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if prev[neighbour.name].nil?\n        dist[neighbour] = dist[vertex] + 1\n        prev[neighbour.name] = vertex.name\n        queue.push(neighbour)\n      end\n    end\n  end\n  visitedQueue.push(vertex.name)\nend\nreturn visitedQueue.values\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/DFS","path":"Graphlb/Algorithms/DFS.html","kind":"class","full_name":"Graphlb::Algorithms::DFS","name":"DFS","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/depth_first_search.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/depth_first_search.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Depth first Search is an algorithm for finding\nall the vertices that are reachable from  a source,\nvertex in a graph.\n\nGiven a graph and source vertex Depth First Search finds\nthe vertices that are reachable from the source vertex\nin a graph\n","summary":"<p>Depth first Search is an algorithm for finding all the vertices that are reachable from  a source, vertex in a graph.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"\nreturns a list of all vertices that are reachable from the\nsource vertices.\n","summary":"<p>returns a list of all vertices that are reachable from the source vertices.</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/depth_first_search.cr#L19","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/depth_first_search.cr#L19","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  dist[vertices[i]] = Float64::INFINITY\n  prev[vertices[i].name] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\ndist[source] = 0.0\nprev[source.name] = source.name\nvisitedQueue = Stack(String).new\nqueue = Stack(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in stack\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if prev[neighbour.name].nil?\n        dist[neighbour] = dist[vertex] + 1\n        prev[neighbour.name] = vertex.name\n        queue.push(neighbour)\n      end\n    end\n  end\n  puts((  vertex.name))\n  visitedQueue.push(vertex.name)\nend\nreturn visitedQueue.values\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/Dijkstras","path":"Graphlb/Algorithms/Dijkstras.html","kind":"class","full_name":"Graphlb::Algorithms::Dijkstras","name":"Dijkstras","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/dijkstras.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Dijkstra's algorithm is an algorithm for finding\nthe shortest paths between nodes in a graph,\n\nGiven a graph and source vertex dijkstra function finds\nthe shortest distance from the source vertex to all other\nvertices in the graph\n","summary":"<p>Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph,</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"path_constructor(prev,source,target)-instance-method","html_id":"path_constructor(prev,source,target)-instance-method","name":"path_constructor","doc":"constructs a path from source vertex to target vertex\nReturns the shortest path, if it exists, as an Array of vertices.","summary":"<p>constructs a path from source vertex to target vertex Returns the shortest path, if it exists, as an Array of vertices.</p>","abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(prev, source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr#L52","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr#L52","def":{"name":"path_constructor","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = target.name\nwhile ((!temp.nil?) && (temp != source.name))\n  set.insert(0, temp)\n  temp = prev[temp]\nend\nset.insert(0, source.name)\nreturn set\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"\nreturns two hashes, one contains the distance is vetex from the source\nnode whereas, other hash conntains the information about the previous\nnodes for vertices in the graph\n","summary":"<p>returns two hashes, one contains the distance is vetex from the source node whereas, other hash conntains the information about the previous nodes for vertices in the graph </p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr#L20","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/algorithms/dijkstras.cr#L20","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  dist[vertices[i]] = Float64::INFINITY\n  prev[vertices[i].name] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\ndist[source] = 0.0\nwhile !vertex_set.empty?\n  u = vertex_set.min_by do |n|\n    dist.fetch(n, Float64::INFINITY)\n  end\n  vertex_set.delete(u)\n  u.edges.keys.each do |neighbour|\n    temp = dist[u] + u.edges[neighbour]\n    if temp < dist[neighbour]\n      dist[neighbour] = temp\n      prev[neighbour.name] = u.name\n    end\n  end\nend\nreturn {dist, prev}\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/Prims","path":"Graphlb/Algorithms/Prims.html","kind":"class","full_name":"Graphlb::Algorithms::Prims","name":"Prims","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/spanning_trees/prims.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Prim's algorithm is an algorithm for finding\nthe Minimum spanning tree in a graph, i.e the tree\nwith the lowest weight\n\nGiven a graph and source vertex dijkstra function finds\nthe shortest distance from the source vertex to all other\nvertices in the graph\n","summary":"<p>Prim's algorithm is an algorithm for finding the Minimum spanning tree in a graph, i.e the tree with the lowest weight</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"path_constructor(prev,source,target)-instance-method","html_id":"path_constructor(prev,source,target)-instance-method","name":"path_constructor","doc":"constructs a path from source vertex to target vertex\nReturns the shortest path, if it exists, as an Array of vertices.","summary":"<p>constructs a path from source vertex to target vertex Returns the shortest path, if it exists, as an Array of vertices.</p>","abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(prev, source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr#L52","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr#L52","def":{"name":"path_constructor","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = target.name\nwhile ((!temp.nil?) && (temp != source.name))\n  set.insert(0, temp)\n  temp = prev[temp]\nend\nset.insert(0, source.name)\nreturn set\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"\nreturns a hashes, which contains the information about the\nprevious vertex of all the vertives present inside the graph\n","summary":"<p>returns a hashes, which contains the information about the previous vertex of all the vertives present inside the graph </p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr#L19","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/spanning_trees/prims.cr#L19","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\nvisit_set = {} of Node => Bool\ni = 0\nsize = vertex_set.size\nwhile i < size\n  dist[vertex_set[i]] = Float64::INFINITY\n  prev[vertex_set[i].name] = nil\n  visit_set[vertex_set[i]] = false\n  i = i + 1\nend\ndist[source] = 0.0\nwhile !vertex_set.empty?\n  u = vertex_set.min_by do |n|\n    dist.fetch(n, Float64::INFINITY)\n  end\n  vertex_set.delete(u)\n  visit_set[u] = true\n  u.edges.keys.each do |neighbour|\n    if u.edges[neighbour] < dist[neighbour] && (visit_set[neighbour] == false)\n      dist[neighbour] = u.edges[neighbour]\n      prev[neighbour.name] = u.name\n    end\n  end\nend\nreturn prev\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","path":"Graphlb/DataStructures.html","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/data_structures/nodes.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr"},{"filename":"graphlb/data_structures/queue.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr"},{"filename":"graphlb/data_structures/stack.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr"},{"filename":"graphlb/data_structures/undirectedgraph.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr"},{"filename":"graphlb/data_structures/directedgraph.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb","kind":"module","full_name":"Graphlb","name":"Graphlb"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/DirectedGraph","path":"Graphlb/DataStructures/DirectedGraph.html","kind":"class","full_name":"Graphlb::DataStructures::DirectedGraph","name":"DirectedGraph","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/directedgraph.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"The DirectedGraph class represents a graph with all the vertices and directed edges","summary":"<p>The DirectedGraph class represents a graph with all the vertices and directed edges</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"creats a graph","summary":"<p>creats a graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L9","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L9","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","html_id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","name":"add_edge","doc":"Add edges to the graph from the from_node to to_node with a given edge_weight","summary":"<p>Add edges to the graph from the from_node to to_node with a given edge_weight</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(from_node : Node, to_node : Node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L21","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L21","def":{"name":"add_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (from.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  from.add_edge(to_node, weight)\nend\n"}},{"id":"add_vertex(name)-instance-method","html_id":"add_vertex(name)-instance-method","name":"add_vertex","doc":"Add nodes to the graph with the given name","summary":"<p>Add nodes to the graph with the given name</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L14","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L14","def":{"name":"add_vertex","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"temp = Node.new(name)\n@vertices << temp\nreturn temp\n"}},{"id":"get_vertices-instance-method","html_id":"get_vertices-instance-method","name":"get_vertices","doc":"returns informaton about all the vertices inside the graph","summary":"<p>returns informaton about all the vertices inside the graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L46","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L46","def":{"name":"get_vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @vertices"}},{"id":"remove_edge(from_node:Node,to_node:Node)-instance-method","html_id":"remove_edge(from_node:Node,to_node:Node)-instance-method","name":"remove_edge","doc":"Removes the edge form the from_node to the to_node present in the graph","summary":"<p>Removes the edge form the from_node to the to_node present in the graph</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"args_string":"(from_node : Node, to_node : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L32","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L32","def":{"name":"remove_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = @vertices.find do |i|\n  i == from_node\nend\nif node.nil?\n  raise(\"Node not found\")\nelse\n  if node.edges.has_key?(to_node)\n    node.remove_edge(to_node)\n  else\n    raise(\"edge not found\")\n  end\nend\n"}},{"id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","html_id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","name":"vertices","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Graphlb::DataStructures::Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L6","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/directedgraph.cr#L6","def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Node","path":"Graphlb/DataStructures/Node.html","kind":"class","full_name":"Graphlb::DataStructures::Node","name":"Node","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/nodes.cr","line_number":10,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"The node Class basically represnts the vertices in a graph\nit contains two properties\n  1. name of the vertex\n  2. edge shared with other vertex\n\nedges property in Node reprensents the adjacency graph which\nis implemented using a hash with vertex name as it key\nand edge weight as its value","summary":"<p>The node Class basically represnts the vertices in a graph it contains two properties   1.</p>","class_methods":[],"constructors":[{"id":"new(name:String)-class-method","html_id":"new(name:String)-class-method","name":"new","doc":"creates a new edge with a given name","summary":"<p>creates a new edge with a given name</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L14","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L14","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"!=(other:Node)-instance-method","html_id":"!=(other:Node)-instance-method","name":"!=","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"args_string":"(other : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L33","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L33","def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name != other.name"}},{"id":"==(other:Node)-instance-method","html_id":"==(other:Node)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"args_string":"(other : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L29","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L29","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name == other.name"}},{"id":"add_edge(node,weight)-instance-method","html_id":"add_edge(node,weight)-instance-method","name":"add_edge","doc":"Adds a new edge to the vertex node with information about\nedge weight and adjacent vertex","summary":"<p>Adds a new edge to the vertex node with information about edge weight and adjacent vertex</p>","abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L20","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L20","def":{"name":"add_edge","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges[node] = weight"}},{"id":"edges:Hash(Graphlb::DataStructures::Node,Float64)-instance-method","html_id":"edges:Hash(Graphlb::DataStructures::Node,Float64)-instance-method","name":"edges","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(Graphlb::DataStructures::Node, Float64)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L11","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L11","def":{"name":"edges","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L11","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L11","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"remove_edge(node)-instance-method","html_id":"remove_edge(node)-instance-method","name":"remove_edge","doc":"Removes an already existing edge from the graph","summary":"<p>Removes an already existing edge from the graph</p>","abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"args_string":"(node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L25","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/nodes.cr#L25","def":{"name":"remove_edge","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges.delete(node)"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Queue","path":"Graphlb/DataStructures/Queue.html","kind":"class","full_name":"Graphlb::DataStructures::Queue(A)","name":"Queue","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/queue.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"A Queue Data Structure formed using an Array\nA Queue follows Last-in-First-out\n","summary":"<p>A Queue Data Structure formed using an Array A Queue follows Last-in-First-out </p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the Queue with empty","summary":"<p>Initializes the Queue with empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L8","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L8","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Queue(A).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"returns true if the Queue is empty","summary":"<p>returns true if the Queue is empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L28","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L28","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.empty?"}},{"id":"pop-instance-method","html_id":"pop-instance-method","name":"pop","doc":"pops the value that is first inserted","summary":"<p>pops the value that is first inserted</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L18","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L18","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.shift?"}},{"id":"push(val)-instance-method","html_id":"push(val)-instance-method","name":"push","doc":"pushes the value present inside the val into the Queue","summary":"<p>pushes the value present inside the val into the Queue</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"args_string":"(val)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L13","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L13","def":{"name":"push","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array << val"}},{"id":"top-instance-method","html_id":"top-instance-method","name":"top","doc":"returns the first-most element in the queue","summary":"<p>returns the first-most element in the queue</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L23","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L23","def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.first?"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":"returns all the values that are present in the Queue","summary":"<p>returns all the values that are present in the Queue</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L33","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/queue.cr#L33","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Stack","path":"Graphlb/DataStructures/Stack.html","kind":"class","full_name":"Graphlb::DataStructures::Stack(A)","name":"Stack","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/stack.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"A stack Data Structure formed using an Array\nA stack follows Last-in-First-out","summary":"<p>A stack Data Structure formed using an Array A stack follows Last-in-First-out</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the stack with empty","summary":"<p>Initializes the stack with empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L7","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L7","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Stack(A).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"returns true if the stack is empty","summary":"<p>returns true if the stack is empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L27","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L27","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.empty?"}},{"id":"pop-instance-method","html_id":"pop-instance-method","name":"pop","doc":"pops the value that is last inserted","summary":"<p>pops the value that is last inserted</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L17","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L17","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.pop?"}},{"id":"push(val)-instance-method","html_id":"push(val)-instance-method","name":"push","doc":"pushes the value present inside the val into the stack","summary":"<p>pushes the value present inside the val into the stack</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"args_string":"(val)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L12","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L12","def":{"name":"push","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array << val"}},{"id":"top-instance-method","html_id":"top-instance-method","name":"top","doc":"returns the top-most element in the stack","summary":"<p>returns the top-most element in the stack</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L22","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L22","def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.last?"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":"returns all the values that are present in the stack","summary":"<p>returns all the values that are present in the stack</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L32","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/stack.cr#L32","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/UnDirectedGraph","path":"Graphlb/DataStructures/UnDirectedGraph.html","kind":"class","full_name":"Graphlb::DataStructures::UnDirectedGraph","name":"UnDirectedGraph","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/undirectedgraph.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"The UnDirectedGraph class represents a graph with all the vertices and undirectededges","summary":"<p>The UnDirectedGraph class represents a graph with all the vertices and undirectededges</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"creats a graph","summary":"<p>creats a graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L9","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L9","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","html_id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","name":"add_edge","doc":"Add edges to the graph from the from_node to to_node with a given edge_weight","summary":"<p>Add edges to the graph from the from_node to to_node with a given edge_weight</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(from_node : Node, to_node : Node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L21","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L21","def":{"name":"add_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (from.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  from.add_edge(to_node, weight)\n  to.add_edge(from_node, weight)\nend\n"}},{"id":"add_vertex(name)-instance-method","html_id":"add_vertex(name)-instance-method","name":"add_vertex","doc":"Add nodes to the graph with the given name","summary":"<p>Add nodes to the graph with the given name</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L14","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L14","def":{"name":"add_vertex","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"temp = Node.new(name)\n@vertices << temp\nreturn temp\n"}},{"id":"get_vertices-instance-method","html_id":"get_vertices-instance-method","name":"get_vertices","doc":"returns informaton about all the vertices inside the graph","summary":"<p>returns informaton about all the vertices inside the graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L49","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L49","def":{"name":"get_vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @vertices"}},{"id":"remove_edge(from_node:Node,to_node:Node)-instance-method","html_id":"remove_edge(from_node:Node,to_node:Node)-instance-method","name":"remove_edge","doc":"Removes the edge form the from_node to the to_node present in the graph","summary":"<p>Removes the edge form the from_node to the to_node present in the graph</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"args_string":"(from_node : Node, to_node : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L33","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L33","def":{"name":"remove_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (node.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  if (  (from.edges.has_key?(to)) && (to.edges.has_key?(from)))\n    from.remove_edge(to_node)\n    to.remove_edge(from_node)\n  else\n    raise(\"edge not found\")\n  end\nend\n"}},{"id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","html_id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","name":"vertices","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Graphlb::DataStructures::Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L6","source_link":"https://github.com/mettuaditya/graphlb/blob/04cbfa54a1942276505e57f76af1ef1643f8d66e/src/graphlb/data_structures/undirectedgraph.cr#L6","def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices"}}],"macros":[],"types":[]}]}]}]}})
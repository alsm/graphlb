{"repository_name":"github.com/mettuaditya/graphlb","body":"[![Build Status](https://travis-ci.org/mettuaditya/graphlb.svg?branch=master)](https://travis-ci.org/mettuaditya/graphlb)\n# graphlb\ngraphlb is a crystal library which contains all the graph datastructures and algorithms in crystal-lang.\n\n# Documentation\nPlease find the Documentation [here](https://mettuaditya.github.io/graphlb/)\n\n# Installation\n\nClone repository manually:\n\n```sh\n$ git clone https://github.com/mettuaditya/graphlb && cd graphlb/\n```\nor  add this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  graphlb:\n    github: mettuaditya/graphlb\n    version: ~> 0.1.0\n```\n\nThen run `shards install`\n\n\n# To Do\n\n* Algorithms\n  - [x] Bellman-Ford\n  - [x] Dijkstras\n  - [x] Breadth-First-Search\n  - [x] Depth-First-Search\n  - [x] Prims\n  - [x] Edmonds-karp\n  - [ ] Floyd-warshall\n  - [x] Ford-Fulkerson\n  - [ ] Bipartite-Matching\n  - [ ] Strongly Connected Components\n\n* Data-Structues\n  - [x] Directed-Graph\n  - [x] UnDirected-Graph\n  - [x] Queue\n  - [x] Stack\n  - [x] General-Tree\n  - [x] Binary-search-tree\n  - [ ] Radix-tree\n  - [ ] RB-tree\n\n## Contributors\n\n- [mettuaditya](https://github.com/mettuaditya) Aditya Mettu - creator, maintainer\n","program":{"html_id":"github.com/mettuaditya/graphlb/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"locations":[],"repository_name":"github.com/mettuaditya/graphlb","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"SRC_TEXT","name":"SRC_TEXT","value":"\"# An AMI\\ndigraph graphname {\\n     a -- b -> c;\\n     b -> d;\\n }\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"extended_modules":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot","path":"Dot.html","kind":"module","full_name":"Dot","name":"Dot","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr"},{"filename":"graphlb/dot_parser/ast/value_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/value_token.cr"},{"filename":"graphlb/dot_parser/ast/block_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr"},{"filename":"graphlb/dot_parser/ast/false_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr"},{"filename":"graphlb/dot_parser/ast/graph_type_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr"},{"filename":"graphlb/dot_parser/ast/identifier_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr"},{"filename":"graphlb/dot_parser/ast/list_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr"},{"filename":"graphlb/dot_parser/ast/null_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr"},{"filename":"graphlb/dot_parser/ast/number_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr"},{"filename":"graphlb/dot_parser/ast/string_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/string_token.cr"},{"filename":"graphlb/dot_parser/ast/true_token.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr"},{"filename":"graphlb/dot_parser/lexer.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/lexer.cr"},{"filename":"graphlb/dot_parser/ast.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast.cr"},{"filename":"graphlb/dot_parser/parser.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr"},{"filename":"graphlb/dot.cr","line_number":9,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Grammar","name":"Grammar","value":"Pegmatite::DSL.define do\n  comment_char = range(' ', 1114111_u32)\n  comment = (((char('#')) >> ((~(char('\\n'))) >> comment_char).maybe.repeat) >> (char('\\n'))).named(:comment, false)\n  multi_comment_char = (~(str(\"*/\"))) >> (((comment_char | (char('\\n'))) | (char('\\r'))) | (char('\\t')))\n  multi_comment = (((((char('/')) >> (char('*'))) >> multi_comment_char.maybe.repeat) >> (char('*'))) >> (char('/'))).named(:multi_comment, false)\n  line_break = (char('\\r')) | ((char('\\n')).named(:line_break, false))\n  whitespace = ((char(' ')) | (char('\\t'))).named(:whitespace, false)\n  s = (((multi_comment | comment) | whitespace) | line_break).repeat.named(:ignored, false)\n  digit19 = range('1', '9')\n  digit = range('0', '9')\n  digits = digit.repeat(1)\n  int = (((((char('-')) >> digit19) >> digits) | ((char('-')) >> digit)) | (digit19 >> digits)) | digit\n  frac = (char('.')) >> digits\n  exp = (((char('e')) | (char('E'))) >> ((char('+')) | (char('-'))).maybe) >> digits\n  numeric = (int >> frac.maybe) >> exp.maybe\n  numeric_str = ((char('\"')) >> numeric) >> (char('\"'))\n  number = (numeric | numeric_str).named(:number)\n  string_char = ((((((((str(\"\\\\\\\"\")) | (str(\"\\\\\\\\\"))) | (str(\"\\\\|\"))) | (str(\"\\\\b\"))) | (str(\"\\\\f\"))) | (str(\"\\\\n\"))) | (str(\"\\\\r\"))) | (str(\"\\\\t\"))) | (((~(char('\"'))) >> (~(char('\\\\')))) >> (range(' ', 1114111_u32)))\n  string = ((char('\"')) >> (string_char.repeat.named(:string))) >> (char('\"'))\n  identifier = ((((range('a', 'z')) | (range('A', 'Z'))) | (char('_'))) >> ((((((range('a', 'z')) | (range('A', 'Z'))) | digits) | (char('_'))) | (char('-'))) | (char('.'))).repeat).named(:identifier)\n  t_null = (str(\"null\")).named(:null)\n  t_true = ((str(\"true\")) | (str(\"\\\"true\\\"\"))).named(:true)\n  t_false = ((str(\"false\")) | (str(\"\\\"false\\\"\"))).named(:false)\n  bool = t_true | t_false\n  value = (((t_null | bool) | number) | identifier) | string\n  pair = (((identifier >> s) >> (char('='))) >> s) >> value\n  pair_id = (((identifier >> s) >> (char('='))) >> s) >> identifier\n  ass = (pair | pair_id).named(:assignment)\n  subgraph = ((str(\"graph\")) | (str(\"digraph\"))).named(:graph_type)\n  a_list = ((((pair_id >> (char(','))) >> (pair_id >> (char(','))).maybe.repeat) | ((pair >> (char(','))) >> (pair >> (char(','))).maybe.repeat)) | pair_id) | pair\n  attr_list = (((identifier >> s) >> (char('['))) >> a_list.maybe.repeat) >> (char(']'))\n  node_statement = (((char('[')) >> attr_list) >> (char(']'))).named(:node_statement)\n  edgeop = ((char('-')) >> (char('>'))) | ((char('-')) >> (char('-')))\n  edgeRHS = ((edgeop >> s.maybe) >> identifier) >> (((s >> edgeop) >> s.maybe) >> identifier).maybe.repeat\n  edge_statement = (((((((identifier >> s) >> edgeRHS) >> s) >> (char('['))) >> attr_list) >> (char(']'))) | ((identifier >> s) >> edgeRHS)).named(:edge_statement)\n  attr_statement = ((identifier >> s) >> attr_list).named(:attr_statement)\n  graph_name = identifier.named(:graph_name)\n  statement = s.maybe.repeat >> ((((node_statement | edge_statement) | attr_statement) | ass).named(:statement))\n  statement_list = (((statement >> (char(';'))) >> s.maybe) >> ((statement >> (char(';'))) >> s.maybe).maybe.repeat) | ((statement >> (char(';'))) >> s.maybe)\n  graph = (((((((subgraph >> s) >> graph_name) >> s.maybe) >> (char('{'))) >> s.maybe.repeat) >> statement_list) >> (char('}'))).named(:block)\n  ((s >> graph) >> s).then_eof\nend","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","path":"Dot/AST.html","kind":"module","full_name":"Dot::AST","name":"AST","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr"},{"filename":"graphlb/dot_parser/ast/value_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/value_token.cr"},{"filename":"graphlb/dot_parser/ast/block_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr"},{"filename":"graphlb/dot_parser/ast/false_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr"},{"filename":"graphlb/dot_parser/ast/graph_type_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr"},{"filename":"graphlb/dot_parser/ast/identifier_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr"},{"filename":"graphlb/dot_parser/ast/list_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr"},{"filename":"graphlb/dot_parser/ast/null_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr"},{"filename":"graphlb/dot_parser/ast/number_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr"},{"filename":"graphlb/dot_parser/ast/string_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/string_token.cr"},{"filename":"graphlb/dot_parser/ast/true_token.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr"},{"filename":"graphlb/dot_parser/ast.cr","line_number":2,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot","kind":"module","full_name":"Dot","name":"Dot"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/BlockToken","path":"Dot/AST/BlockToken.html","kind":"class","full_name":"Dot::AST::BlockToken","name":"BlockToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/block_token.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token,string:String,id:String,args:String,values:Hash(String,ValueToken),blocks:Array(BlockToken))-class-method","html_id":"new(peg_tuple:Pegmatite::Token,string:String,id:String,args:String,values:Hash(String,ValueToken),blocks:Array(BlockToken))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Hash(String, ValueToken)"},{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":"Array(BlockToken)"}],"args_string":"(peg_tuple : Pegmatite::Token, string : String, id : String, args : String, values : Hash(String, ValueToken), blocks : Array(BlockToken))","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr#L13","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Hash(String, ValueToken)"},{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":"Array(BlockToken)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple, string, id, args, values, blocks)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"blocks:Array(Dot::AST::BlockToken)-instance-method","html_id":"blocks:Array(Dot::AST::BlockToken)-instance-method","name":"blocks","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Dot::AST::BlockToken)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr#L5","def":{"name":"blocks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@blocks"}},{"id":"id:String-instance-method","html_id":"id:String-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr#L5","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr#L29","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{id: id, args: args.map do |arg|\n  arg.value\nend, values: values_dict, blocks: blocks.map do |block|\n  block.value.as(Value)\nend}"}},{"id":"values:Hash(String,Dot::AST::ValueToken)-instance-method","html_id":"values:Hash(String,Dot::AST::ValueToken)-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Dot::AST::ValueToken)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr#L5","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@values"}}],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/BlockToken/Value","path":"Dot/AST/BlockToken/Value.html","kind":"alias","full_name":"Dot::AST::BlockToken::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/block_token.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/block_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(id: String, values: Hash(String, Bool | Float64 | Int64 | NamedTuple(id: String, parts: Array(Dot::AST::IdentifierToken::Value)) | String | Nil), blocks: Array(Dot::AST::BlockToken::Value))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/BlockToken","kind":"class","full_name":"Dot::AST::BlockToken","name":"BlockToken"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/FalseToken","path":"Dot/AST/FalseToken.html","kind":"class","full_name":"Dot::AST::FalseToken","name":"FalseToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/false_token.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STRING_VAL","name":"STRING_VAL","value":"\"false\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token)-class-method","html_id":"new(peg_tuple:Pegmatite::Token)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"args_string":"(peg_tuple : Pegmatite::Token)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr#L7","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"string-instance-method","html_id":"string-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr#L11","def":{"name":"string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"STRING_VAL"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/false_token.cr#L15","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/GraphTypeToken","path":"Dot/AST/GraphTypeToken.html","kind":"class","full_name":"Dot::AST::GraphTypeToken","name":"GraphTypeToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/graph_type_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"includes_parts?-instance-method","html_id":"includes_parts?-instance-method","name":"includes_parts?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr#L19","def":{"name":"includes_parts?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string.includes?('.')"}},{"id":"parts-instance-method","html_id":"parts-instance-method","name":"parts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr#L27","def":{"name":"parts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parts || (@parts = string_parts.map do |part|\n  IdentifierToken.new({:identifier, -1, -1}, part)\nend)"}},{"id":"string_parts-instance-method","html_id":"string_parts-instance-method","name":"string_parts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr#L23","def":{"name":"string_parts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@string_parts || (@string_parts = string.split('.'))"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr#L12","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{id: string, parts: parts_value}"}}],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/GraphTypeToken/Value","path":"Dot/AST/GraphTypeToken/Value.html","kind":"alias","full_name":"Dot::AST::GraphTypeToken::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/graph_type_token.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/graph_type_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(id: String, parts: Array(Dot::AST::GraphTypeToken::Value))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/GraphTypeToken","kind":"class","full_name":"Dot::AST::GraphTypeToken","name":"GraphTypeToken"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/IdentifierToken","path":"Dot/AST/IdentifierToken.html","kind":"class","full_name":"Dot::AST::IdentifierToken","name":"IdentifierToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/identifier_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"includes_parts?-instance-method","html_id":"includes_parts?-instance-method","name":"includes_parts?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr#L19","def":{"name":"includes_parts?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string.includes?('.')"}},{"id":"parts-instance-method","html_id":"parts-instance-method","name":"parts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr#L27","def":{"name":"parts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parts || (@parts = string_parts.map do |part|\n  IdentifierToken.new({:identifier, -1, -1}, part)\nend)"}},{"id":"string_parts-instance-method","html_id":"string_parts-instance-method","name":"string_parts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr#L23","def":{"name":"string_parts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@string_parts || (@string_parts = string.split('.'))"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr#L12","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{id: string, parts: parts_value}"}}],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/IdentifierToken/Value","path":"Dot/AST/IdentifierToken/Value.html","kind":"alias","full_name":"Dot::AST::IdentifierToken::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/identifier_token.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/identifier_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(id: String, parts: Array(Dot::AST::IdentifierToken::Value))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/IdentifierToken","kind":"class","full_name":"Dot::AST::IdentifierToken","name":"IdentifierToken"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ListToken","path":"Dot/AST/ListToken.html","kind":"class","full_name":"Dot::AST::ListToken","name":"ListToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/list_token.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","html_id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(peg_tuple : Pegmatite::Token, string : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr#L7","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple, string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"<<(token:ValueToken)-instance-method","html_id":"&lt;&lt;(token:ValueToken)-instance-method","name":"<<","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"ValueToken"}],"args_string":"(token : ValueToken)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr#L12","def":{"name":"<<","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"ValueToken"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children << token"}},{"id":"children:Array(Dot::AST::ValueToken)-instance-method","html_id":"children:Array(Dot::AST::ValueToken)-instance-method","name":"children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Dot::AST::ValueToken)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr#L5","def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/list_token.cr#L16","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.map do |item|\n  item.value.as(ValueType)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NullToken","path":"Dot/AST/NullToken.html","kind":"class","full_name":"Dot::AST::NullToken","name":"NullToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/null_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STRING_VAL","name":"STRING_VAL","value":"\"null\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token)-class-method","html_id":"new(peg_tuple:Pegmatite::Token)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"args_string":"(peg_tuple : Pegmatite::Token)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr#L6","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"string-instance-method","html_id":"string-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr#L10","def":{"name":"string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"STRING_VAL"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/null_token.cr#L14","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"nil"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NumberToken","path":"Dot/AST/NumberToken.html","kind":"class","full_name":"Dot::AST::NumberToken","name":"NumberToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/number_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","html_id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(peg_tuple : Pegmatite::Token, string : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr#L6","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple, string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr#L11","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if string.includes?('.')\n  string.to_f64\nelse\n  string.to_i64\nend"}}],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NumberToken/Value","path":"Dot/AST/NumberToken/Value.html","kind":"alias","full_name":"Dot::AST::NumberToken::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast/number_token.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/number_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":true,"aliased":"(Float64 | Int64)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NumberToken","kind":"class","full_name":"Dot::AST::NumberToken","name":"NumberToken"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/StringToken","path":"Dot/AST/StringToken.html","kind":"class","full_name":"Dot::AST::StringToken","name":"StringToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/string_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/string_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/string_token.cr#L4","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","path":"Dot/AST/Token.html","kind":"class","full_name":"Dot::AST::Token","name":"Token","abstract":true,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/BlockToken","kind":"class","full_name":"Dot::AST::BlockToken","name":"BlockToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"}],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","html_id":"new(peg_tuple:Pegmatite::Token,string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(peg_tuple : Pegmatite::Token, string : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr#L8","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"},{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple, string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"as_s-instance-method","html_id":"as_s-instance-method","name":"as_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr#L14","def":{"name":"as_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string"}},{"id":"kind:Symbol-instance-method","html_id":"kind:Symbol-instance-method","name":"kind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr#L6","def":{"name":"kind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind"}},{"id":"string:String-instance-method","html_id":"string:String-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr#L6","def":{"name":"string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@string"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/token.cr#L18","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/TrueToken","path":"Dot/AST/TrueToken.html","kind":"class","full_name":"Dot::AST::TrueToken","name":"TrueToken","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/true_token.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STRING_VAL","name":"STRING_VAL","value":"\"true\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(peg_tuple:Pegmatite::Token)-class-method","html_id":"new(peg_tuple:Pegmatite::Token)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"args_string":"(peg_tuple : Pegmatite::Token)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr#L6","def":{"name":"new","args":[{"name":"peg_tuple","doc":null,"default_value":"","external_name":"peg_tuple","restriction":"Pegmatite::Token"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(peg_tuple)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"string-instance-method","html_id":"string-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr#L10","def":{"name":"string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"STRING_VAL"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/true_token.cr#L14","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueToken","path":"Dot/AST/ValueToken.html","kind":"class","full_name":"Dot::AST::ValueToken","name":"ValueToken","abstract":true,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/Token","kind":"class","full_name":"Dot::AST::Token","name":"Token"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/ast/value_token.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/value_token.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/FalseToken","kind":"class","full_name":"Dot::AST::FalseToken","name":"FalseToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/GraphTypeToken","kind":"class","full_name":"Dot::AST::GraphTypeToken","name":"GraphTypeToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/IdentifierToken","kind":"class","full_name":"Dot::AST::IdentifierToken","name":"IdentifierToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ListToken","kind":"class","full_name":"Dot::AST::ListToken","name":"ListToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NullToken","kind":"class","full_name":"Dot::AST::NullToken","name":"NullToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/NumberToken","kind":"class","full_name":"Dot::AST::NumberToken","name":"NumberToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/StringToken","kind":"class","full_name":"Dot::AST::StringToken","name":"StringToken"},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/TrueToken","kind":"class","full_name":"Dot::AST::TrueToken","name":"TrueToken"}],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"value:ValueType-instance-method","html_id":"value:ValueType-instance-method","name":"value","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : ValueType","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast/value_token.cr#L5","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ValueType","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Dot/AST/ValueType","path":"Dot/AST/ValueType.html","kind":"alias","full_name":"Dot::AST::ValueType","name":"ValueType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/dot_parser/ast.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/ast.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int64 | NamedTuple(id: String, parts: Array(Dot::AST::IdentifierToken::Value)) | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot/AST","kind":"module","full_name":"Dot::AST","name":"AST"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Dot/Parser","path":"Dot/Parser.html","kind":"class","full_name":"Dot::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/mettuaditya/graphlb/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/dot_parser/parser.cr","line_number":6,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/mettuaditya/graphlb/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Dot","kind":"module","full_name":"Dot","name":"Dot"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(source:String)-class-method","html_id":"new(source:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"args_string":"(source : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L14","def":{"name":"new","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L35","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if peg_main = @peg_iter.peek\n  @peg_iter.next\n  build_token(peg_main, @peg_iter, source)\nelse\n  stop\nend"}},{"id":"parse-instance-method","html_id":"parse-instance-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L23","def":{"name":"parse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parsed || (@parsed = to_a)"}},{"id":"source:String-instance-method","html_id":"source:String-instance-method","name":"source","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L11","def":{"name":"source","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@source"}},{"id":"string-instance-method","html_id":"string-instance-method","name":"string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L27","def":{"name":"string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parse.map do |token|\n  token.string\nend.join('\\n')"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/dot_parser/parser.cr#L31","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"parse.map do |token|\n  token.value\nend"}}],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb","path":"Graphlb.html","kind":"module","full_name":"Graphlb","name":"Graphlb","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/data_structures/tree.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr"},{"filename":"graphlb.cr","line_number":8,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb.cr"},{"filename":"graphlb/algorithms/dot.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"\nGraphlb is a framework of Graph data-structures and algorithms\nwhich are inspired from the Ruby Graph Library (RGL).\n\nSome data-structures are ported from the Ruby language like TreeNode from Ruby Trees","summary":"<p>Graphlb is a framework of Graph data-structures and algorithms which are inspired from the Ruby Graph Library (RGL).</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","path":"Graphlb/Algorithms.html","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/algorithms/bellman_ford.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bellman_ford.cr"},{"filename":"graphlb/algorithms/depth_first_search.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/depth_first_search.cr"},{"filename":"graphlb/algorithms/bipartite.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr"},{"filename":"graphlb/algorithms/breadth_first_search.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/breadth_first_search.cr"},{"filename":"graphlb/algorithms/dijkstras.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dijkstras.cr"},{"filename":"graphlb/algorithms/edmonds_karp.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/edmonds_karp.cr"},{"filename":"graphlb/algorithms/ford_fulkerson.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/ford_fulkerson.cr"},{"filename":"graphlb/algorithms/strongly_connected_components.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/strongly_connected_components.cr"},{"filename":"graphlb/spanning_trees/prims.cr","line_number":4,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/spanning_trees/prims.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb","kind":"module","full_name":"Graphlb","name":"Graphlb"},"doc":"Algorithms contain all the general algorithms that can be used on a graph data-structure\n\nlike Flow Networks, Graph Traversal, Shortest path between Nodes, Spanning Trees etc.\n","summary":"<p>Algorithms contain all the general algorithms that can be used on a graph data-structure</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/BellmanFord","path":"Graphlb/Algorithms/BellmanFord.html","kind":"class","full_name":"Graphlb::Algorithms::BellmanFord","name":"BellmanFord","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/bellman_ford.cr","line_number":16,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bellman_ford.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Bellman Ford's algorithm is an algorithm for finding\nthe shortest paths between nodes in a graph,\n\nGiven a graph and source vertex Bellman Fords algorithm finds\nthe shortest distance from the source vertex to all other\nvertices in the graph.\n\nIt also finds wheather a negative cycle is present in a graph or not","summary":"<p>Bellman Ford's algorithm is an algorithm for finding the shortest paths between nodes in a graph,</p>","class_methods":[],"constructors":[{"id":"new(graph,source)-class-method","html_id":"new(graph,source)-class-method","name":"new","doc":"\nRuns the Bellman_Ford Algorithm on the given graph and the source node\n\nIf the graph contains a negative cycle it returns an exception\n\n@param : graph, A directed graph\n\n@param : Source, Source vertex form which the algorithm starts running","summary":"<p>Runs the Bellman_Ford Algorithm on the given graph and the source node</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bellman_ford.cr#L25","def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(graph, source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"shortest_path(source,target)-instance-method","html_id":"shortest_path(source,target)-instance-method","name":"shortest_path","doc":"constructs a path from source vertex to target vertex\n\n@param : Source, the source vertex for the path\n\n@param : target, The vertex till which the path should be constructed\n\n@return : An array which contains all the vertices(path) to be travelled\nto reach from source to target vertex\n","summary":"<p>constructs a path from source vertex to target vertex</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bellman_ford.cr#L69","def":{"name":"shortest_path","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = @prev[target.name]\nwhile (!temp.nil?)\n  set.insert(0, temp)\n  temp = @prev[temp]\nend\nif (set.empty? || (set[0] != source.name))\n  if (  target == source)\n    return set << source.name\n  end\n  return set << \"nil\"\nelse\n  set << target.name\n  return set\nend\n"}},{"id":"shortest_paths(source)-instance-method","html_id":"shortest_paths(source)-instance-method","name":"shortest_paths","doc":"constructs a path from source vertex to all other vertices in the graph\n\n@param : Source, the source vertex for the path\n\n@return : An array which contains all the vertices(path) to be travelled\nto reach from source vertex to all other vertices in the graph","summary":"<p>constructs a path from source vertex to all other vertices in the graph</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bellman_ford.cr#L93","def":{"name":"shortest_paths","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_path = Array(Array(String)).new\n@dist.keys.each do |vertex|\n  path = shortest_path(source, vertex)\n  vertex_path << path\nend\nreturn vertex_path\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/BFS","path":"Graphlb/Algorithms/BFS.html","kind":"class","full_name":"Graphlb::Algorithms::BFS","name":"BFS","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/breadth_first_search.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/breadth_first_search.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Breadth first Search is an algorithm for finding\nall the vertices that are reachable from  a source,\nvertex in a graph.\n\nGiven a graph and source vertex Breadth First Search finds\nthe vertices that are reachable from the source vertex\nin a graph\n","summary":"<p>Breadth first Search is an algorithm for finding all the vertices that are reachable from  a source, vertex in a graph.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"reachable(graph,source)-instance-method","html_id":"reachable(graph,source)-instance-method","name":"reachable","doc":"Given a graph and a Source vertex the BFS algorithm starts running from the sources\nvertex to find all the vertices that are reachable from the source vertex and the\ninformation about the previous node of all nodes\n\n\n@param : graph, A graph on which the vertices are connected\n\n@param : Source, A source vertex where the algorithm starts\n\n@return : a tuple ([String]visited_nodes,[Hash]prev), visited nodes store the names\nof all the nodes that are reachable form the source vertex and prev stores the information\nabout the previous nodes","summary":"<p>Given a graph and a Source vertex the BFS algorithm starts running from the sources vertex to find all the vertices that are reachable from the source vertex and the information about the previous node of all nodes</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/breadth_first_search.cr#L74","def":{"name":"reachable","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\nprev = {} of Node => Node | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  prev[vertices[i]] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\nprev[source] = source\nvisitedQueue = Queue(String).new\nqueue = Queue(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in Queue\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if (      prev[neighbour].nil? && vertex.edges[neighbour] > 0.0)\n        prev[neighbour] = vertex\n        queue.push(neighbour)\n      end\n    end\n  end\n  visitedQueue.push(vertex.name)\nend\nreturn {visitedQueue.values, prev}\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"Given a graph and a Source vertex the BFS algorithm starts running from the sources\nvertex to find all the vertices that are visited from the source vertex.\n\nThe DFS algorithm uses Queue data-structure to find the next node to visit\n\n@param : graph, A graph on which the vertices are connected\n\n@param : Source, A source vertex where the algorithm starts\n\n@return : [string], An array of type string which contains all the node that are reachable form the source vertex","summary":"<p>Given a graph and a Source vertex the BFS algorithm starts running from the sources vertex to find all the vertices that are visited from the source vertex.</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/breadth_first_search.cr#L26","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  dist[vertices[i]] = Float64::INFINITY\n  prev[vertices[i].name] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\ndist[source] = 0.0\nprev[source.name] = source.name\nvisitedQueue = Queue(String).new\nqueue = Queue(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in Queue\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if prev[neighbour.name].nil?\n        dist[neighbour] = dist[vertex] + 1\n        prev[neighbour.name] = vertex.name\n        queue.push(neighbour)\n      end\n    end\n  end\n  visitedQueue.push(vertex.name)\nend\nreturn visitedQueue.values\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/Bipartite","path":"Graphlb/Algorithms/Bipartite.html","kind":"class","full_name":"Graphlb::Algorithms::Bipartite","name":"Bipartite","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/bipartite.cr","line_number":6,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph)-class-method","html_id":"new(graph)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"args_string":"(graph)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr#L9","def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(graph)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"assign_colour(key)-instance-method","html_id":"assign_colour(key)-instance-method","name":"assign_colour","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr#L46","def":{"name":"assign_colour","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @previous[key].nil?\n  @colour_map[key] = true\nelse\n  @colour_map[key] = !@colour_map[value]\nend"}},{"id":"bipartite_set-instance-method","html_id":"bipartite_set-instance-method","name":"bipartite_set","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr#L31","def":{"name":"bipartite_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while (@colour_map.size != @visited_set.size)\n  @visited_set.each do |v|\n    assign_colour(v)\n  end\nend\nset_s = @colour_map.select do |key, value|\n  value == false\nend\nset_t = @colour_map.select do |key, value|\n  value == true\nend\ncheck_set(set_s)\ncheck_set(set_t)\nreturn {set_s, set_t}\n"}},{"id":"check_set(set)-instance-method","html_id":"check_set(set)-instance-method","name":"check_set","doc":null,"summary":null,"abstract":false,"args":[{"name":"set","doc":null,"default_value":"","external_name":"set","restriction":""}],"args_string":"(set)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/bipartite.cr#L54","def":{"name":"check_set","args":[{"name":"set","doc":null,"default_value":"","external_name":"set","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set.each do |v|\n  v.edges.keys do |u|\n    if set.include?(u)\n      return \"no bipartite possible\"\n    end\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/DFS","path":"Graphlb/Algorithms/DFS.html","kind":"class","full_name":"Graphlb::Algorithms::DFS","name":"DFS","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/depth_first_search.cr","line_number":13,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/depth_first_search.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Depth first Search is an algorithm for finding\nall the vertices that are reachable from  a source,\nvertex in a graph.\n\nGiven a graph and source vertex Depth First Search finds\nthe vertices that are reachable from the source vertex\nin a graph\n","summary":"<p>Depth first Search is an algorithm for finding all the vertices that are reachable from  a source, vertex in a graph.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"reachable(graph,source)-instance-method","html_id":"reachable(graph,source)-instance-method","name":"reachable","doc":"Given a graph and a Source vertex the DFS algorithm starts running from the sources\nvertex to find all the vertices that are reachable from the source vertex and the\ninformation about the previous node of all nodes\n\n\n@param : graph, A graph on which the vertices are connected\n\n@param : Source, A source vertex where the algorithm starts\n\n@return : a tuple ([String]visited_nodes,[Hash]prev), visited nodes store the names\nof all the nodes that are reachable form the source vertex and prev stores the information\nabout the previous nodes","summary":"<p>Given a graph and a Source vertex the DFS algorithm starts running from the sources vertex to find all the vertices that are reachable from the source vertex and the information about the previous node of all nodes</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/depth_first_search.cr#L72","def":{"name":"reachable","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\nprev = {} of Node => Node | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  prev[vertices[i]] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\nprev[source] = source\nvisitedQueue = Stack(String).new\nqueue = Stack(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in stack\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if (      prev[neighbour].nil? && vertex.edges[neighbour] > 0.0)\n        prev[neighbour] = vertex\n        queue.push(neighbour)\n      end\n    end\n  end\n  visitedQueue.push(vertex.name)\nend\nreturn {visitedQueue.values, prev}\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"Given a graph and a Source vertex the DFS algorithm starts running from the sources\nvertex to find all the vertices that are visited from the source vertex.\n\nThe DFS algorithm uses stack data-structure to find the next node to visit\n\n@param : graph, A graph on which the vertices are connected\n\n@param : Source, A source vertex where the algorithm starts\n\n@return : [string], An array of type string which contains all the node that are reachable form the source vertex","summary":"<p>Given a graph and a Source vertex the DFS algorithm starts running from the sources vertex to find all the vertices that are visited from the source vertex.</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/depth_first_search.cr#L24","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = [] of Node\nvertices = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\ni = 0\nsize = vertices.size\nwhile i < size\n  dist[vertices[i]] = Float64::INFINITY\n  prev[vertices[i].name] = nil\n  vertex_set << vertices[i]\n  i = i + 1\nend\ndist[source] = 0.0\nprev[source.name] = source.name\nvisitedQueue = Stack(String).new\nqueue = Stack(Node).new\nqueue.push(source)\nwhile !queue.empty?\n  vertex = queue.pop\n  if vertex.nil?\n    raise(\"No vertex available in stack\")\n  else\n    vertex.edges.keys.each do |neighbour|\n      if prev[neighbour.name].nil?\n        dist[neighbour] = dist[vertex] + 1\n        prev[neighbour.name] = vertex.name\n        queue.push(neighbour)\n      end\n    end\n  end\n  visitedQueue.push(vertex.name)\nend\nreturn visitedQueue.values\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/Dijkstras","path":"Graphlb/Algorithms/Dijkstras.html","kind":"class","full_name":"Graphlb::Algorithms::Dijkstras","name":"Dijkstras","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/dijkstras.cr","line_number":12,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dijkstras.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Dijkstra's algorithm is an algorithm for finding\nthe shortest paths between nodes in a graph,\n\nGiven a graph and source vertex dijkstra function finds\nthe shortest distance from the source vertex to all other\nvertices in the graph\n","summary":"<p>Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph,</p>","class_methods":[],"constructors":[{"id":"new(graph,source)-class-method","html_id":"new(graph,source)-class-method","name":"new","doc":"Runs the Dijkstras Algorithm on the given graph and the source node\n\n@param : graph, A directed graph,\n\n@param : Source, Source vertex form which the algorithm starts running,\n\n@raise : it raises an exception when there is a negative edge in the graph","summary":"<p>Runs the Dijkstras Algorithm on the given graph and the source node</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dijkstras.cr#L20","def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(graph, source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"shortest_path(source,target)-instance-method","html_id":"shortest_path(source,target)-instance-method","name":"shortest_path","doc":"constructs a path from source vertex to target vertex\n\n@param : prev , prev hash contains the previous node of all the vertices\n\n@param : Source, the source vertex for the path\n\n@param : target, The vertex till which the path should be constructed\n\n@return : An array which contains all the vertices(path) to be travelled\nto reach from source to target vertex\n","summary":"<p>constructs a path from source vertex to target vertex</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dijkstras.cr#L63","def":{"name":"shortest_path","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = @prev[target.name]\nwhile (!temp.nil?)\n  set.insert(0, temp)\n  temp = @prev[temp]\nend\nif (set.empty? || (set[0] != source.name))\n  if (  target == source)\n    return set << source.name\n  end\n  return set << \"nil\"\nelse\n  set << target.name\n  return set\nend\n"}},{"id":"shortest_paths(source)-instance-method","html_id":"shortest_paths(source)-instance-method","name":"shortest_paths","doc":"constructs a path from source vertex to all other vertices in the graph\n\n@param : Source, the source vertex for the path\n\n@return : An array which contains all the vertices(path) to be travelled\nto reach from source vertex to all other vertices in the graph","summary":"<p>constructs a path from source vertex to all other vertices in the graph</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dijkstras.cr#L87","def":{"name":"shortest_paths","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_path = Array(Array(String)).new\n@dist.keys.each do |vertex|\n  path = shortest_path(source, vertex)\n  vertex_path << path\nend\nreturn vertex_path\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/EdmondsKarp","path":"Graphlb/Algorithms/EdmondsKarp.html","kind":"class","full_name":"Graphlb::Algorithms::EdmondsKarp","name":"EdmondsKarp","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/edmonds_karp.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/edmonds_karp.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"The Edmonds-Karp Algorithm is a specific implementation of the Ford-Fulkerson\nalgorithm. Like Ford-Fulkerson, Edmonds-Karp is also an algorithm that deals\nwith the max-flow min-cut problem\n\nEdmonds-Karp differs from Ford-Fulkerson in that it chooses the next augmenting\npath using breadth-first search (bfs). So, if there are multiple augmenting\npaths to choose from, Edmonds-Karp will be sure to choose the shortest\naugmenting path from the source to the sink.","summary":"<p>The Edmonds-Karp Algorithm is a specific implementation of the Ford-Fulkerson algorithm.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"run(graph,source,sink)-instance-method","html_id":"run(graph,source,sink)-instance-method","name":"run","doc":"Finds the maximum flow in the flow network graph\n\nGiven a source, sink and flow network the ford fulkerson algorithm runs on the graph.\nThe algorithm starts form the source vetex and finds the maximum flow. This algorithm uses\nDFS to go to traverse the graph.\n\n@param : graph, a directed graph with edge capacities,\n\n@param : source, a source node where the algorithm starts,\n\n@param : sink, a sink where the flow ends\n\n@return : max_flow[Float64], the maximum flow in the flow network","summary":"<p>Finds the maximum flow in the flow network graph</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"sink","doc":null,"default_value":"","external_name":"sink","restriction":""}],"args_string":"(graph, source, sink)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/edmonds_karp.cr#L29","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"sink","doc":null,"default_value":"","external_name":"sink","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max_flow = 0\nrgraph = graph\nr_vertices = rgraph.get_vertices\nr_vertices.each do |vertex|\n  vertex.edges.keys.each do |neighbour|\n    if (    vertex.edges[neighbour] < 0.0)\n      raise(\"graph contains negative capacities\")\n    end\n    if (    neighbour.edges.keys.find do |i|\n      i == vertex\n    end).nil?\n      neighbour.add_edge(vertex, 0.0)\n    end\n  end\nend\nif (source == sink)\n  raise(\"same source and sink\")\nend\ndfs = BFS.new\nvisit_set, prev = dfs.reachable(rgraph, source)\ntemp = visit_set.find do |i|\n  i == sink.name\nend\nif temp.nil?\n  raise(\"source and sink are not reachable\")\nend\nwhile (true)\n  visit_set, prev = dfs.reachable(rgraph, source)\n  temp = visit_set.find do |i|\n    i == sink.name\n  end\n  if temp.nil?\n    break\n  else\n    path_len = Float64::INFINITY\n    v = sink\n    while (    v != source)\n      u = prev[v]\n      if u.nil?\n        raise(\"invalid input\")\n      end\n      path_len = Math.min(path_len, u.edges[v])\n      v = u\n    end\n    v = sink\n    while (    v != source)\n      u = prev[v]\n      if (      u.nil? || v.nil?)\n        raise(\"invaid input\")\n      end\n      u.edges[v] = u.edges[v] - path_len\n      v.edges[u] = v.edges[u] + path_len\n      v = u\n    end\n  end\n  max_flow = max_flow + path_len\nend\nreturn max_flow\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/FordFulkerson","path":"Graphlb/Algorithms/FordFulkerson.html","kind":"class","full_name":"Graphlb::Algorithms::FordFulkerson","name":"FordFulkerson","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/ford_fulkerson.cr","line_number":18,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/ford_fulkerson.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"in the graph, to find the maximum possible flow from s to t with following constraints needs to be true:\n\na) Flow on an edge doesn’t exceed the given capacity of the edge.\n\nb) Incoming flow is equal to outgoing flow for every vertex except s and t.\n\nIn ford Fulkerson algorithm An augmenting path is a simple path from source to sink which do not include any\ncycles and that pass only through positive weighted edges. A residual network graph\nindicates how much more flow is allowed in each edge in the network graph. If there\nare no augmenting paths possible from source to sink, then the flow is maximum. The result i.e.\nthe maximum flow will be the total flow out of source node which is also equal to\ntotal flow in to the sink node.","summary":"<p>in the graph, to find the maximum possible flow from s to t with following constraints needs to be true:</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"run(graph,source,sink)-instance-method","html_id":"run(graph,source,sink)-instance-method","name":"run","doc":"Finds the maximum flow in the flow network graph\n\nGiven a source, sink and flow network the ford fulkerson algorithm runs on the graph.\nThe algorithm starts form the source vetex and finds the maximum flow. This algorithm uses\nBFS to go to traverse the graph.\n\n@param : graph, a directed graph with edge capacities,\n\n@param : source, a source node where the algorithm starts,\n\n@param : sink, a sink where the flow ends\n\n@return : max_flow[Float64], the maximum flow in the flow network","summary":"<p>Finds the maximum flow in the flow network graph</p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"sink","doc":null,"default_value":"","external_name":"sink","restriction":""}],"args_string":"(graph, source, sink)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/ford_fulkerson.cr#L33","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"sink","doc":null,"default_value":"","external_name":"sink","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max_flow = 0\nrgraph = graph\nr_vertices = rgraph.get_vertices\nr_vertices.each do |vertex|\n  vertex.edges.keys.each do |neighbour|\n    if (    vertex.edges[neighbour] < 0.0)\n      raise(\"graph contains negative capacities\")\n    end\n    if (    neighbour.edges.keys.find do |i|\n      i == vertex\n    end).nil?\n      neighbour.add_edge(vertex, 0.0)\n    end\n  end\nend\nif (source == sink)\n  raise(\"same source and sink\")\nend\ndfs = DFS.new\nvisit_set, prev = dfs.reachable(rgraph, source)\ntemp = visit_set.find do |i|\n  i == sink.name\nend\nif temp.nil?\n  raise(\"source and sink are not reachable\")\nend\nwhile (true)\n  visit_set, prev = bfs.reachable(rgraph, source)\n  temp = visit_set.find do |i|\n    i == sink.name\n  end\n  if temp.nil?\n    break\n  else\n    path_len = Float64::INFINITY\n    v = sink\n    while (    v != source)\n      u = prev[v]\n      if u.nil?\n        raise(\"invalid input\")\n      end\n      path_len = Math.min(path_len, u.edges[v])\n      v = u\n    end\n    v = sink\n    while (    v != source)\n      u = prev[v]\n      if (      u.nil? || v.nil?)\n        raise(\"invaid input\")\n      end\n      u.edges[v] = u.edges[v] - path_len\n      v.edges[u] = v.edges[u] + path_len\n      v = u\n    end\n  end\n  max_flow = max_flow + path_len\nend\nreturn max_flow\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/Prims","path":"Graphlb/Algorithms/Prims.html","kind":"class","full_name":"Graphlb::Algorithms::Prims","name":"Prims","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/spanning_trees/prims.cr","line_number":13,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/spanning_trees/prims.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":"Prim's algorithm is an algorithm for finding\nthe Minimum spanning tree in a graph, i.e the tree\nwith the lowest weight\n\nGiven a graph and source vertex dijkstra function finds\nthe shortest distance from the source vertex to all other\nvertices in the graph\n","summary":"<p>Prim's algorithm is an algorithm for finding the Minimum spanning tree in a graph, i.e the tree with the lowest weight</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"path_constructor(prev,source,target)-instance-method","html_id":"path_constructor(prev,source,target)-instance-method","name":"path_constructor","doc":"constructs a path from source vertex to target vertex\n\n@param : prev , prev hash contains the previous node of all the vertices\n\n@param : Source, the source vertex for the path\n\n@param : target, The vertex till which the path should be constructed\n\n@return : An array which contains all the vertices(path) to be travelled\nto reach from source to target vertex\n","summary":"<p>constructs a path from source vertex to target vertex</p>","abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(prev, source, target)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/spanning_trees/prims.cr#L60","def":{"name":"path_constructor","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""},{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set = [] of String\ntemp = target.name\nwhile ((!temp.nil?) && (temp != source.name))\n  set.insert(0, temp)\n  temp = prev[temp]\nend\nset.insert(0, source.name)\nreturn set\n"}},{"id":"run(graph,source)-instance-method","html_id":"run(graph,source)-instance-method","name":"run","doc":"\nreturns a hashes, which contains the information about the\nprevious vertex of all the vertives present inside the graph\n","summary":"<p>returns a hashes, which contains the information about the previous vertex of all the vertives present inside the graph </p>","abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"args_string":"(graph, source)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/spanning_trees/prims.cr#L18","def":{"name":"run","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""},{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vertex_set = graph.get_vertices\ndist = {} of Node => Float64\nprev = {} of String => String | Nil\nvisit_set = {} of Node => Bool\ni = 0\nsize = vertex_set.size\nwhile i < size\n  dist[vertex_set[i]] = Float64::INFINITY\n  prev[vertex_set[i].name] = nil\n  visit_set[vertex_set[i]] = false\n  i = i + 1\nend\ndist[source] = 0.0\nwhile !vertex_set.empty?\n  u = vertex_set.min_by do |n|\n    dist.fetch(n, Float64::INFINITY)\n  end\n  vertex_set.delete(u)\n  visit_set[u] = true\n  u.edges.keys.each do |neighbour|\n    if u.edges[neighbour] < dist[neighbour] && (visit_set[neighbour] == false)\n      dist[neighbour] = u.edges[neighbour]\n      prev[neighbour.name] = u.name\n    end\n  end\nend\nreturn prev\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms/StronglyConnectedComponents","path":"Graphlb/Algorithms/StronglyConnectedComponents.html","kind":"class","full_name":"Graphlb::Algorithms::StronglyConnectedComponents","name":"StronglyConnectedComponents","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/strongly_connected_components.cr","line_number":5,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/strongly_connected_components.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/Algorithms","kind":"module","full_name":"Graphlb::Algorithms","name":"Algorithms"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph)-class-method","html_id":"new(graph)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"args_string":"(graph)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/strongly_connected_components.cr#L7","def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(graph)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"strongconnect(node)-instance-method","html_id":"strongconnect(node)-instance-method","name":"strongconnect","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"args_string":"(node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/strongly_connected_components.cr#L18","def":{"name":"strongconnect","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node.index = @index\nnode.lowlink = @index\n@index = @index + 1\nS.push(node)\nnode.onStack = true\nnode.edges.keys.each do |adjacent_vertex|\n  if (  adjacent_vertex.index == Float64::INFINITY)\n    strongConnect(adjacent_vertex)\n    node.lowlink = Math.min(node.lowlink, adjacent_vertex.lowlink)\n    elseif((    adjacent_vertex.onStack))\n    node.lowlink = Math.min(node.lowlink, adjacent_vertex.lowlink)\n  end\nend\nif (node.lowlink == node.index)\n  scc = Array(Node).new\n  while (  S.empty?)\n    w = S.pop\n    w.onStack = false\n    scc << w\n  end\n  puts((  scc))\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","path":"Graphlb/DataStructures.html","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/data_structures/tree.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr"},{"filename":"graphlb/data_structures/binary_tree.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr"},{"filename":"graphlb/data_structures/nodes.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr"},{"filename":"graphlb/data_structures/queue.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr"},{"filename":"graphlb/data_structures/stack.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr"},{"filename":"graphlb/data_structures/undirectedgraph.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr"},{"filename":"graphlb/data_structures/directedgraph.cr","line_number":7,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb","kind":"module","full_name":"Graphlb","name":"Graphlb"},"doc":"In the module the we have defined the data-structures starting from the simple Node data-structure to a complex tree data-structure\nwhich will be used in many general graph algorithms to obtain efficient solutions.\n\nThese are Just some of the basic data-structures and more data-structures will be added as we move between different algorithms.","summary":"<p>In the module the we have defined the data-structures starting from the simple Node data-structure to a complex tree data-structure which will be used in many general graph algorithms to obtain efficient solutions.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/BinaryTreeNode","path":"Graphlb/DataStructures/BinaryTreeNode.html","kind":"class","full_name":"Graphlb::DataStructures::BinaryTreeNode","name":"BinaryTreeNode","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/TreeNode","kind":"class","full_name":"Graphlb::DataStructures::TreeNode","name":"TreeNode"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/TreeNode","kind":"class","full_name":"Graphlb::DataStructures::TreeNode","name":"TreeNode"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/binary_tree.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"Provides a Binary tree implementation. This node allows only two child nodes\n(left and right child). It also provides direct access to the left or right\nchild, including assignment to the same.\n\nThis inherits from the {TreeNode} class.","summary":"<p>Provides a Binary tree implementation.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"is_left_child?-instance-method","html_id":"is_left_child?-instance-method","name":"is_left_child?","doc":"*true* if the receiver node is the left child of its parent.\nAlways returns *false* if it is a root node.\n\n@return [Boolean] *true* if this is the left child of its parent.","summary":"<p><em>true</em> if the receiver node is the left child of its parent.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L38","def":{"name":"is_left_child?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return false\nend\nself == parent.left_child\n"}},{"id":"is_right_child?-instance-method","html_id":"is_right_child?-instance-method","name":"is_right_child?","doc":"*true* if the receiver node is the right child of its parent.\nAlways returns *false* if it is a root node.\n\n@return [Boolean] *true* if this is the right child of its parent.","summary":"<p><em>true</em> if the receiver node is the right child of its parent.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L48","def":{"name":"is_right_child?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return false\nend\nself == parent.right_child\n"}},{"id":"left_child-instance-method","html_id":"left_child-instance-method","name":"left_child","doc":"Left child of the receiver node. Note that left Child == first Child.\n\n@return [BinaryTreeNode] The left most (or first) child.","summary":"<p>Left child of the receiver node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L19","def":{"name":"left_child","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.first"}},{"id":"left_child=(child)-instance-method","html_id":"left_child=(child)-instance-method","name":"left_child=","doc":"Sets the left child of the receiver node. If a previous child existed, it\nis replaced.\n\n@param [BinaryTreeNode] child The child to add as the left-side\nnode.\n\n@return [BinaryTreeNode] The assigned child node.","summary":"<p>Sets the left child of the receiver node.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L84","def":{"name":"left_child=","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_child_at(child, 0)"}},{"id":"right_child-instance-method","html_id":"right_child-instance-method","name":"right_child","doc":"Right child of the receiver node. Note that right child == last child\nunless there is only one child.\n\nReturns *nil* if the right child does not exist.\n\n@return [BinaryTreeNode] The right child, or *nil* if the right side\nchild does not exist.","summary":"<p>Right child of the receiver node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L30","def":{"name":"right_child","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[1]"}},{"id":"right_child=(child)-instance-method","html_id":"right_child=(child)-instance-method","name":"right_child=","doc":"Sets the right child of the receiver node. If a previous child existed, it\nis replaced.\n\n@param [BinaryTreeNode] child The child to add as the right-side\nnode.\n\n@return [BinaryTreeNode] The assigned child node.\n","summary":"<p>Sets the right child of the receiver node.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L96","def":{"name":"right_child=","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_child_at(child, 1)"}},{"id":"swap_children-instance-method","html_id":"swap_children-instance-method","name":"swap_children","doc":"Swaps the left and right child nodes of the receiver node with each other.","summary":"<p>Swaps the left and right child nodes of the receiver node with each other.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/binary_tree.cr#L101","def":{"name":"swap_children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.left_child, self.right_child = self.right_child, self.left_child"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/DirectedGraph","path":"Graphlb/DataStructures/DirectedGraph.html","kind":"class","full_name":"Graphlb::DataStructures::DirectedGraph","name":"DirectedGraph","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/directedgraph.cr","line_number":16,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"A directed graph (or digraph) is a graph that is made up of a set of vertices connected by edges,\nwhere the edges have a direction and weight associated with them.\n\nThe class provides various methods which can be used to define/modify a simple directed graph with edge-weight\nAssociated to each edge. Here we are using the adjacency list approach to define a directed graph which\ncan be modified later as per convience\n","summary":"<p>A directed graph (or digraph) is a graph that is made up of a set of vertices connected by edges, where the edges have a direction and weight associated with them.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"creats a graph whith no vertices and edges(empty-graph)","summary":"<p>creats a graph whith no vertices and edges(empty-graph)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L22","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","html_id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","name":"add_edge","doc":"Creates an edge between the nodes provided as the parametes.\n\nIf the form_node and to_node_ are same then also the node is created witha cycle in the graph.\n\nIf any of the from_node or to_node is not found in the graph a exception is raised.\n\n@param : from_node, the vertex from which the directed edge starts.\n\n@param : to_node, the vertex to which the directed edge ends.\n\n@param : weight, the weight of the edge created\n\n@return : the list of all edges of the from_node","summary":"<p>Creates an edge between the nodes provided as the parametes.</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(from_node : Node, to_node : Node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L56","def":{"name":"add_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (from.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  from.add_edge(to_node, weight)\nend\n"}},{"id":"add_vertex(name)-instance-method","html_id":"add_vertex(name)-instance-method","name":"add_vertex","doc":"Creates a new vertex with in the graph.\n\nThe vertex name is expected to be unique to differentiate between the vertex within the graph\nand perform operations on them.\n\n@param [String] name, to define the name of the vertex hwich is expected to be unique.\n\n@return [Vertex] newly created node.","summary":"<p>Creates a new vertex with in the graph.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L37","def":{"name":"add_vertex","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"temp = Node.new(name)\n@vertices << temp\nreturn temp\n"}},{"id":"get_vertices-instance-method","html_id":"get_vertices-instance-method","name":"get_vertices","doc":"returns informaton about all the vertices inside the graph\n\n@return : list of all vertices/nodes in the graph","summary":"<p>returns informaton about all the vertices inside the graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L96","def":{"name":"get_vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @vertices"}},{"id":"remove_edge(from_node:Node,to_node:Node)-instance-method","html_id":"remove_edge(from_node:Node,to_node:Node)-instance-method","name":"remove_edge","doc":"Removes the edge form the from_node to the to_node present in the graph\n\nIf the form_node and to_node_ are same and the edge is present between them the edge is removed\nelse excetion is raised\n\nIf any of the from_node or to_node is not found in the graph a exception is raised.\n\nIf edge between the from_node and the to_node is not found in the graph a exception is raised\n\n@param : from_node, the node from which the edge starts,\n\n@param : to_node, the node where the edge ends,\n\n@return : list of all edges from the from node","summary":"<p>Removes the edge form the from_node to the to_node present in the graph</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"args_string":"(from_node : Node, to_node : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L80","def":{"name":"remove_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = @vertices.find do |i|\n  i == from_node\nend\nif node.nil?\n  raise(\"Node not found\")\nelse\n  if node.edges.has_key?(to_node)\n    node.remove_edge(to_node)\n  else\n    raise(\"edge not found\")\n  end\nend\n"}},{"id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","html_id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","name":"vertices","doc":"All the vertices of the graph are stored in this variables","summary":"<p>All the vertices of the graph are stored in this variables</p>","abstract":false,"args":[],"args_string":" : Array(Graphlb::DataStructures::Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/directedgraph.cr#L19","def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Node","path":"Graphlb/DataStructures/Node.html","kind":"class","full_name":"Graphlb::DataStructures::Node","name":"Node","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/nodes.cr","line_number":10,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"The node Class basically represnts the vertices in a graph\nit contains two properties\n  1. name of the vertex\n  2. edge shared with other vertex\n\nedges property in Node reprensents the adjacency graph which\nis implemented using a hash with vertex name as it key\nand edge weight as its value","summary":"<p>The node Class basically represnts the vertices in a graph it contains two properties   1.</p>","class_methods":[],"constructors":[{"id":"new(name:String)-class-method","html_id":"new(name:String)-class-method","name":"new","doc":"creats a graph whith no vertices and edges(empty-graph)","summary":"<p>creats a graph whith no vertices and edges(empty-graph)</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L19","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"!=(other:Node)-instance-method","html_id":"!=(other:Node)-instance-method","name":"!=","doc":"Checks the wheather the two node are not equal\n\n@return : *true* if the two nodes are not equal, else false.","summary":"<p>Checks the wheather the two node are not equal</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"args_string":"(other : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L57","def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name != other.name"}},{"id":"==(other:Node)-instance-method","html_id":"==(other:Node)-instance-method","name":"==","doc":"Checks the wheather the two node are equal\n\n@return : *true* if the two nodes are equal, else false.","summary":"<p>Checks the wheather the two node are equal</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"args_string":"(other : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L50","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name == other.name"}},{"id":"add_edge(to_node,weight)-instance-method","html_id":"add_edge(to_node,weight)-instance-method","name":"add_edge","doc":"Adds a new edge from the self to the to_node\n\nif to_node is not present in the greaph an exception is raised else an edge is created.\n\n@param : to_node, the node where the edge ends,\n\n@param : weight, the edge-weight,\n\n@return : list of edges of the self node","summary":"<p>Adds a new edge from the self to the to_node</p>","abstract":false,"args":[{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(to_node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L32","def":{"name":"add_edge","args":[{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges[to_node] = weight"}},{"id":"edges:Hash(Graphlb::DataStructures::Node,Float64)-instance-method","html_id":"edges:Hash(Graphlb::DataStructures::Node,Float64)-instance-method","name":"edges","doc":"A Hash to store the adjacency list of the vertex","summary":"<p>A Hash to store the adjacency list of the vertex</p>","abstract":false,"args":[],"args_string":" : Hash(Graphlb::DataStructures::Node, Float64)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L16","def":{"name":"edges","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"Name of the node, which is expexted to be unique for each vertex.","summary":"<p>Name of the node, which is expexted to be unique for each vertex.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L13","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"remove_edge(to_node)-instance-method","html_id":"remove_edge(to_node)-instance-method","name":"remove_edge","doc":"Removes an already existing edge from the graph\n\nif to_node is not present in the greaph an exception is raised else an edge is created.\n\n@param : to_node, the node where the edge ends,\n\n@return : list of edges of the self node","summary":"<p>Removes an already existing edge from the graph</p>","abstract":false,"args":[{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":""}],"args_string":"(to_node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/nodes.cr#L43","def":{"name":"remove_edge","args":[{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@edges.delete(to_node)"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Queue","path":"Graphlb/DataStructures/Queue.html","kind":"class","full_name":"Graphlb::DataStructures::Queue(A)","name":"Queue","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/queue.cr","line_number":8,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"In crystal, elements in an array are added in dynamics fashion means\nthe size of the array is not fixed which makes them quite similar\nto linked list.\n\nHere we have implemented the Queue Data Structure using an Array. A Queue follows First-in-First-out.","summary":"<p>In crystal, elements in an array are added in dynamics fashion means the size of the array is not fixed which makes them quite similar to linked list.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the Queue with empty array","summary":"<p>Initializes the Queue with empty array</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L11","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Queue(A).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"returns true if the Queue is empty","summary":"<p>returns true if the Queue is empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L37","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.empty?"}},{"id":"pop-instance-method","html_id":"pop-instance-method","name":"pop","doc":"pops the value that is first inserted\n\n@return : first element inserted","summary":"<p>pops the value that is first inserted</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L27","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.shift?"}},{"id":"push(val)-instance-method","html_id":"push(val)-instance-method","name":"push","doc":"pushes the value present inside the val into the queue\n\n@param : val , the value we want to append into the queue\n\n@return : returns the array of elements in the queue","summary":"<p>pushes the value present inside the val into the queue</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"args_string":"(val)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L20","def":{"name":"push","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array << val"}},{"id":"top-instance-method","html_id":"top-instance-method","name":"top","doc":"returns the first-most element in the queue without deleting it","summary":"<p>returns the first-most element in the queue without deleting it</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L32","def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.first?"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":"returns all the values that are present in the Queue","summary":"<p>returns all the values that are present in the Queue</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/queue.cr#L42","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/Stack","path":"Graphlb/DataStructures/Stack.html","kind":"class","full_name":"Graphlb::DataStructures::Stack(A)","name":"Stack","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/stack.cr","line_number":8,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"In crystal, elements in an array are added in dynamics fashion means\nthe size of the array is not fixed which makes them quite similar\nto linked list.\n\nHere we have implemanted the stack data-structure using an array.A stack follows Last-in-First-out.","summary":"<p>In crystal, elements in an array are added in dynamics fashion means the size of the array is not fixed which makes them quite similar to linked list.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes the stack with empty Array","summary":"<p>Initializes the stack with empty Array</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L11","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Stack(A).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"returns true if the stack is empty","summary":"<p>returns true if the stack is empty</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L37","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.empty?"}},{"id":"pop-instance-method","html_id":"pop-instance-method","name":"pop","doc":"pops the value that is last inserted\n\n@return : last element inserted","summary":"<p>pops the value that is last inserted</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L27","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.pop?"}},{"id":"push(val)-instance-method","html_id":"push(val)-instance-method","name":"push","doc":"pushes the value present inside the val into the stack\n\n@param : val , the value we want to append into the stack\n\n@return : returns the array of elements in the stack","summary":"<p>pushes the value present inside the val into the stack</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"args_string":"(val)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L20","def":{"name":"push","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array << val"}},{"id":"top-instance-method","html_id":"top-instance-method","name":"top","doc":"returns the top-most element in the stack without deleting it.","summary":"<p>returns the top-most element in the stack without deleting it.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L32","def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array.last?"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":"returns all the values that are present in the stack","summary":"<p>returns all the values that are present in the stack</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/stack.cr#L42","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@array"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/TreeNode","path":"Graphlb/DataStructures/TreeNode.html","kind":"class","full_name":"Graphlb::DataStructures::TreeNode","name":"TreeNode","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/tree.cr","line_number":27,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/BinaryTreeNode","kind":"class","full_name":"Graphlb::DataStructures::BinaryTreeNode","name":"BinaryTreeNode"}],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"TreeNode Class Description\n\nThis class models the nodes for an *N-ary* tree data structure. The\nnodes are *named*, and have a place-holder for the node data (i.e.,\n_content_ of the node). The node names are required to be *unique*\namongst the sibling/peer nodes. Note that the name is implicitly\nused as an _ID_ within the data structure).\n\nThe node's _content_ is *not* required to be unique across\ndifferent nodes in the tree, and can be +nil+ as well.\n\nThe class provides various methods to navigate the tree, traverse\nthe structure, modify contents of the node, change position of the\nnode in the tree, and to make structural changes to the tree.\n\nA node can have any number of *child* nodes attached to it and\nhence can be used to create N-ary trees.  Access to the child\nnodes can be made in order (with the conventional left to right\naccess), or randomly.\n\nThe node also provides direct access to its *parent* node as well\nas other superior parents in the path to root of the tree.  In\naddition, a node can also access its *sibling* nodes, if present.\n","summary":"<p>TreeNode Class Description</p>","class_methods":[],"constructors":[{"id":"new(name,content=nil)-class-method","html_id":"new(name,content=nil)-class-method","name":"new","doc":"Creates a new node with a name and optional content.\nThe node name is expected to be unique within the tree.\n\nThe content can be of type Int32, and defaults to +nil+.\n\n@param [Object] name Name of the node. Conventional usage is to pass a\n  String\n\n@param [Object] content Content of the node.\n\n@raise [ArgumentError] Raised if the node name is empty.","summary":"<p>Creates a new node with a name and optional content.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"content","doc":null,"default_value":"nil","external_name":"content","restriction":""}],"args_string":"(name, content = <span class=\"n\">nil</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L54","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"content","doc":null,"default_value":"nil","external_name":"content","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, content)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"<<(child)-instance-method","html_id":"&lt;&lt;(child)-instance-method","name":"<<","doc":"Convenience synonym for {TreeNode#add} method.\n\nThis method allows an easy mechanism to add node hierarchies to the tree\non a given path via chaining the method calls to successive child nodes.\n\n@example Add a child and grand-child to the root\n  root << child << grand_child\n\n@param [TreeNode] child the child node to add.\n\n@return [TreeNode] The added child node.\n","summary":"<p>Convenience synonym for {TreeNode#add} method.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L208","def":{"name":"<<","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add(child)"}},{"id":"[](name_or_index,num_as_name=false)-instance-method","html_id":"[](name_or_index,num_as_name=false)-instance-method","name":"[]","doc":"Returns the requested node from the set of immediate children.\n\n- If the +name+ argument is an _Integer_, then the in-sequence\n  array of children is accessed using the argument as the\n  *index* (zero-based).  However, if the second _optional_\n  +num_as_name+ argument is +true+, then the +name+ is used\n  literally as a name, and *NOT* as an *index*\n\n- If the +name+ argument is *NOT* an _Integer_, then it is taken to\n  be the *name* of the child node to be returned.\n\nIf a non-+Integer+ +name+ is passed, and the +num_as_name+\nparameter is also +true+, then a warning is thrown (as this is a\nredundant use of the +num_as_name+ flag.)\n\n@param [String|Number] name_or_index Name of the child, or its\n  positional index in the array of child nodes.\n\n@param [Boolean] num_as_name Whether to treat the +Integer+\n  +name+ argument as an actual name, and *NOT* as an _index_ to\n  the children array.\n\n@return [TreeNode] the requested child node.  If the index\n  in not in range, or the name is not present, then a +nil+\n  is returned.\n\n @raise [Error] Raised if the +name_or_index+ argument is +nil+.","summary":"<p>Returns the requested node from the set of immediate children.</p>","abstract":false,"args":[{"name":"name_or_index","doc":null,"default_value":"","external_name":"name_or_index","restriction":""},{"name":"num_as_name","doc":null,"default_value":"false","external_name":"num_as_name","restriction":""}],"args_string":"(name_or_index, num_as_name = <span class=\"n\">false</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L133","def":{"name":"[]","args":[{"name":"name_or_index","doc":null,"default_value":"","external_name":"name_or_index","restriction":""},{"name":"num_as_name","doc":null,"default_value":"false","external_name":"num_as_name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name_or_index == nil\n  raise(\"Name_or_index needs to be provided!\")\nend\nif name_or_index.is_a?(Int32) && (!num_as_name)\n  @children[name_or_index]\nelse\n  if num_as_name && (!(name_or_index.is_a?(Int32)))\n    raise(\"Redundant use of the `num_as_name` flag for non-integer node name\")\n  end\n  @children_hash[name_or_index]\nend\n"}},{"id":"add(child,at_index=-1)-instance-method","html_id":"add(child,at_index=-1)-instance-method","name":"add","doc":"Adds the specified child node to this node.\n\nThis method can also be used for *grafting* a subtree into this\nnode's tree, if the specified child node is the root of a subtree (i.e.,\nhas child nodes under it).\n\nthis node becomes parent of the node passed in as the argument, and\nthe child is added as the last child (\"right most\") in the current set of\nchildren of this node\n\n@param [TreeNode] child The child node to add.\n\n@param [optional, Number] at_index The optional position where the node is\n                                   to be inserted.\n\n@return [TreeNode] The added child node.\n\n@raise [Error]  This exception is raised if another child node with\n                the same name exists, or if an invalid insertion\n                position is specified.\n\n@raise [Error]  This exception is raised if a +nil+ node is passed\n                as the argument.","summary":"<p>Adds the specified child node to this node.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""},{"name":"at_index","doc":null,"default_value":"-1","external_name":"at_index","restriction":""}],"args_string":"(child, at_index = <span class=\"n\">-1</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L235","def":{"name":"add","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""},{"name":"at_index","doc":null,"default_value":"-1","external_name":"at_index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if child\nelse\n  raise(\"Attempting to add a nil node\")\nend\nif self == child\n  raise(\"Attempting add node to itself\")\nend\nif child == root\n  raise(\"Attempting add root as a child\")\nend\nif @children_hash.includes?(child.name)\n  raise(\"child #{child.name} already added!\")\nend\nif insertion_range.includes?(at_index)\n  @children.insert(at_index, child)\nelse\n  raise(\"attempting to insert a child at a non-existing location\")\nend\n@children_hash[child.name] = child\nchild.parent = self\nchild\n"}},{"id":"children:Array(Graphlb::DataStructures::TreeNode)-instance-method","html_id":"children:Array(Graphlb::DataStructures::TreeNode)-instance-method","name":"children","doc":"Method oveloading of the children method\n\nAn array of all the immediate children of this node. The child\nnodes are ordered \"left-to-right\" in the returned array.\n\n@return [Array<TreeNode>] An array of the child nodes.\n","summary":"<p>Method oveloading of the children method</p>","abstract":false,"args":[],"args_string":" : Array(Graphlb::DataStructures::TreeNode)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L461","def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children"}},{"id":"children(&block)-instance-method","html_id":"children(&amp;block)-instance-method","name":"children","doc":"An array of all the immediate children of this node. The child\nnodes are ordered \"left-to-right\" in the returned array.\n\n@param [object] block\n\n@yieldparam child [TreeNode] Each child node.\n\n@return [TreeNode] This node\n","summary":"<p>An array of all the immediate children of this node.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L450","def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@children.each do |child|\n  yield child\nend"}},{"id":"content:Int32?-instance-method","html_id":"content:Int32?-instance-method","name":"content","doc":"Content of this node.  Can be +nil+.  Note that there is no\nuniqueness constraint related to this attribute.","summary":"<p>Content of this node.</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L43","def":{"name":"content","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil | Int32","visibility":"Public","body":"@content"}},{"id":"content=(content:Int32?)-instance-method","html_id":"content=(content:Int32?)-instance-method","name":"content=","doc":"Content of this node.  Can be +nil+.  Note that there is no\nuniqueness constraint related to this attribute.","summary":"<p>Content of this node.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"Nil | Int32"}],"args_string":"(content : Int32?)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L47","def":{"name":"content=","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"Nil | Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@content = content"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"Traverses each node (including this node) of the (sub)tree rooted at this\nnode by yielding the nodes to the specified block.\n\nThe traversal is *depth-first* and from *left-to-right* in pre-ordered\nsequence.\n\n@param [Object] block\n@yieldparam node [TreeNode] Each node.\n\n@return [TreeNode] this node","summary":"<p>Traverses each node (including this node) of the (sub)tree rooted at this node by yielding the nodes to the specified block.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L417","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"node_stack = [self]\nwhile !node_stack.empty?\n  current = node_stack.shift\n  if current\n    yield current\n    node_stack = current.children.concat(node_stack)\n  end\nend\nself\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Traverses each node (including this node) of the (sub)tree rooted at this\nnode\n\n @return [Enumerator] an enumerator on this tree","summary":"<p>Traverses each node (including this node) of the (sub)tree rooted at this node</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L437","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return self.to_enum"}},{"id":"each_leaf-instance-method","html_id":"each_leaf-instance-method","name":"each_leaf","doc":"Method oveloading of the each_leaf method without block parameter\n\n@return [Array<TreeNode>] An array of the leaf nodes\n","summary":"<p>Method oveloading of the each_leaf method without block parameter</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L484","def":{"name":"each_leaf","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.select do |node|\n  node.is_leaf?\nend"}},{"id":"each_leaf(&block)-instance-method","html_id":"each_leaf(&amp;block)-instance-method","name":"each_leaf","doc":"Yields every leaf node of the (sub)tree rooted at this node to the\nspecified block.\n\nMay yield this node as well if this is a leaf node.\nLeaf traversal is *depth-first* and *left-to-right*.\n\n@param [Object] block\n@yieldparam node [TreeNode] Each leaf node.\n\n@return [TreeNode] this node,","summary":"<p>Yields every leaf node of the (sub)tree rooted at this node to the specified block.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L475","def":{"name":"each_leaf","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"self.each do |node|\n  if node.is_leaf?\n    yield node\n  end\nend\nself\n"}},{"id":"first_sibling-instance-method","html_id":"first_sibling-instance-method","name":"first_sibling","doc":"First sibling of this node. If this is the root node, then returns\nitself.\n\n'First' sibling is defined as follows:\n\nFirst sibling:: The left-most child of this node's parent, which may be\nthis node itself\n\n@return [TreeNode] The first sibling node.","summary":"<p>First sibling of this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L337","def":{"name":"first_sibling","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"is_root? ? self : parent.not_nil!.children.first"}},{"id":"has_children?-instance-method","html_id":"has_children?-instance-method","name":"has_children?","doc":"Returns *true* if the this node has any child node.\n\n@return [Boolean] +true+ if child nodes exist.\n","summary":"<p>Returns <em>true</em> if the this node has any child node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L324","def":{"name":"has_children?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children.size != 0"}},{"id":"has_content?-instance-method","html_id":"has_content?-instance-method","name":"has_content?","doc":"Returns *true* if this node has content.\n\n@return [Boolean] +true+ if the node has content.","summary":"<p>Returns <em>true</em> if this node has content.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L307","def":{"name":"has_content?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@content != nil"}},{"id":"in_degree-instance-method","html_id":"in_degree-instance-method","name":"in_degree","doc":"The incoming edge-count of this node.\n\nIn-degree is defined as:\nIn-degree:: Number of edges arriving at the node (0 for root, 1 for\nall other nodes)\n\n- In-degree = 0 for a root or orphaned node\n- In-degree = 1 for a node which has a parent\n\n@return [Integer] The in-degree of this node.","summary":"<p>The incoming edge-count of this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L537","def":{"name":"in_degree","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"is_root? ? 0 : 1"}},{"id":"insertion_range-instance-method","html_id":"insertion_range-instance-method","name":"insertion_range","doc":"Return a range of valid insertion positions.  Used in the #add method.","summary":"<p>Return a range of valid insertion positions.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L253","def":{"name":"insertion_range","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = @children.size\nmin = -(max + 1)\nmin..max\n"}},{"id":"is_first_sibling?-instance-method","html_id":"is_first_sibling?-instance-method","name":"is_first_sibling?","doc":"Returns *true* if this node is the first sibling at its level.\n\n@return [Boolean] *true* if this is the first sibling.","summary":"<p>Returns <em>true</em> if this node is the first sibling at its level.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L345","def":{"name":"is_first_sibling?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"first_sibling == self"}},{"id":"is_last_sibling?-instance-method","html_id":"is_last_sibling?-instance-method","name":"is_last_sibling?","doc":"Returns *true* if this node is the last sibling at its level.\n\n@return [Boolean] +true+ if this is the last sibling.","summary":"<p>Returns <em>true</em> if this node is the last sibling at its level.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L365","def":{"name":"is_last_sibling?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"last_sibling == self"}},{"id":"is_leaf?-instance-method","html_id":"is_leaf?-instance-method","name":"is_leaf?","doc":"Returns *true* if this node is a _leaf_ - i.e., one without\nany children.\n\n@return [Boolean] +true+ if this is a leaf node.\n","summary":"<p>Returns <em>true</em> if this node is a <em>leaf</em> - i.e., one without any children.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L316","def":{"name":"is_leaf?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!has_children?"}},{"id":"is_only_child?-instance-method","html_id":"is_only_child?-instance-method","name":"is_only_child?","doc":"Returns *true* if this node is the only child of its parent.\n\nAs a special case, a root node will always return +true+.\n\n@return [Boolean] +true+ if this is the only child of its parent.","summary":"<p>Returns <em>true</em> if this node is the only child of its parent.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L374","def":{"name":"is_only_child?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"is_root? ? true : parent.not_nil!.children.size == 1"}},{"id":"is_root?-instance-method","html_id":"is_root?-instance-method","name":"is_root?","doc":"Returns *true* if this is a root node.  Note that\norphaned children will also be reported as root nodes.\n\n@return [Boolean] +true+ if this is a root node.","summary":"<p>Returns <em>true</em> if this is a root node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L300","def":{"name":"is_root?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parent.nil?"}},{"id":"lam(node,prefix)-instance-method","html_id":"lam(node,prefix)-instance-method","name":"lam","doc":"Helper function for print_tree method to print the\ntree with given root","summary":"<p>Helper function for print_tree method to print the tree with given root</p>","abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""}],"args_string":"(node, prefix)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L553","def":{"name":"lam","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"puts(\"#{prefix} #{node.name}\")"}},{"id":"last_sibling-instance-method","html_id":"last_sibling-instance-method","name":"last_sibling","doc":"Last sibling of this node.  If this is the root node, then returns\nitself.\n\n'Last' sibling is defined as follows:\n\nLast sibling:: The right-most child of this node's parent, which may be\nthis node itself\n\n@return [TreeNode] The last sibling node.","summary":"<p>Last sibling of this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L358","def":{"name":"last_sibling","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"is_root? ? self : parent.not_nil!.children.last"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"Name of this node.  Expected to be unique within the tree.\n\nNote that the name attribute really functions as an *ID* within\nthe tree structure, and hence the uniqueness constraint is\nrequired.","summary":"<p>Name of this node.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L36","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"next_sibling-instance-method","html_id":"next_sibling-instance-method","name":"next_sibling","doc":"Next sibling for this node.\nThe _next_ node is defined as the node to right of this node.\n\nWill return +nil+ if no subsequent node is present, or if this is a root\nnode.\n\n@return [treeNode] the next sibling node, if present.","summary":"<p>Next sibling for this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L385","def":{"name":"next_sibling","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return nil\nend\nidx = parent.not_nil!.children.index(self)\nif idx\n  parent.not_nil!.children[idx + 1]\nend\n"}},{"id":"node_depth-instance-method","html_id":"node_depth-instance-method","name":"node_depth","doc":"Depth of this node in its tree.  Depth of a node is defined as:\n\nDepth:: Length of the node's path to its root. Depth of a root node is\nzero.\n\n@return [Integer] Depth of this node.","summary":"<p>Depth of this node in its tree.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L522","def":{"name":"node_depth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return 0\nend\n1 + parent.not_nil!.node_depth\n"}},{"id":"node_height-instance-method","html_id":"node_height-instance-method","name":"node_height","doc":"Height of the (sub)tree from this node.  Height of a node is defined as:\n\nHeight:: Length of the longest downward path to a leaf from the node.\n\n- Height from a root node is height of the entire tree.\n- The height of a leaf node is zero.\n\n@return [Integer] Height of the node.","summary":"<p>Height of the (sub)tree from this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L511","def":{"name":"node_height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_leaf?\n  return 0\nend\n1 + @children.collect do |child|\n  child.node_height\nend.max\n"}},{"id":"out_degree-instance-method","html_id":"out_degree-instance-method","name":"out_degree","doc":"The outgoing edge-count of this node.\n\nOut-degree is defined as:\nOut-degree:: Number of edges leaving the node (zero for leafs)\n\n@return [Integer] The out-degree of this node.","summary":"<p>The outgoing edge-count of this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L547","def":{"name":"out_degree","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"is_leaf? ? 0 : children.size"}},{"id":"parent:TreeNode?-instance-method","html_id":"parent:TreeNode?-instance-method","name":"parent","doc":"Parent of this node.  Will be +nil+ for a root node.","summary":"<p>Parent of this node.</p>","abstract":false,"args":[],"args_string":" : TreeNode?","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L39","def":{"name":"parent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil | TreeNode","visibility":"Public","body":"@parent"}},{"id":"parent=(parent)-instance-method","html_id":"parent=(parent)-instance-method","name":"parent=","doc":"Method to set the parent node for this node.\nThis method should *NOT* be invoked by client code.\n\n@param [TreeNode] parent The parent node.\n\n@return [TreeNode] The parent node.","summary":"<p>Method to set the parent node for this node.</p>","abstract":false,"args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":""}],"args_string":"(parent)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L180","def":{"name":"parent=","args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parent = parent\n@node_depth = 0\n"}},{"id":"parentage-instance-method","html_id":"parentage-instance-method","name":"parentage","doc":"An array of ancestors of this node in reversed order\n(the first element is the immediate parent of this node).\n\nReturns +nil+ if this is a root node.\n\n@return [Array<TreeNode>] An array of ancestors of this node\n@return [nil] if this is a root node.","summary":"<p>An array of ancestors of this node in reversed order (the first element is the immediate parent of this node).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L79","def":{"name":"parentage","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return nil\nend\nparentage_array = [] of TreeNode\nprev_parent = self.parent\nwhile prev_parent\n  parentage_array << prev_parent\n  prev_parent = prev_parent.parent\nend\nparentage_array\n"}},{"id":"previous_sibling-instance-method","html_id":"previous_sibling-instance-method","name":"previous_sibling","doc":"Previous sibling of this node.\n_Previous_ node is defined to be the node to left of this node.\n\nWill return +nil+ if no predecessor node is present, or if this is a root\nnode.\n\n@return [treeNode] the previous sibling node, if present.","summary":"<p>Previous sibling of this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L399","def":{"name":"previous_sibling","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return nil\nend\nidx = parent.not_nil!.children.index(self)\nif idx && idx > 0\n  parent.not_nil!.children[idx - 1]\nend\n"}},{"id":"print_tree(level=self.node_depth,max_depth=nil)-instance-method","html_id":"print_tree(level=self.node_depth,max_depth=nil)-instance-method","name":"print_tree","doc":"Pretty prints the (sub)tree rooted at this node.\n\n@param [Integer] level The indentation level (4 spaces) to start with.\n@param [Integer] max_depth optional maximum depth at which the printing\n                           with stop.","summary":"<p>Pretty prints the (sub)tree rooted at this node.</p>","abstract":false,"args":[{"name":"level","doc":null,"default_value":"self.node_depth","external_name":"level","restriction":""},{"name":"max_depth","doc":null,"default_value":"nil","external_name":"max_depth","restriction":""}],"args_string":"(level = <span class=\"k\">self</span>.node_depth, max_depth = <span class=\"n\">nil</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L562","def":{"name":"print_tree","args":[{"name":"level","doc":null,"default_value":"self.node_depth","external_name":"level","restriction":""},{"name":"max_depth","doc":null,"default_value":"nil","external_name":"max_depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"prefix = \"\"\nif is_root?\n  prefix = prefix + \"*\"\nelse\n  if parent.not_nil!.is_last_sibling?\n  else\n    prefix = prefix + '|'\n  end\n  prefix = prefix + ((\" \" * (level - 1)) * 4)\n  prefix = prefix + (is_last_sibling? ? '+' : '|')\n  prefix = prefix + \"---\"\n  prefix = prefix + (has_children? ? '+' : '>')\nend\nlam(self, prefix)\nif max_depth.nil? || level < max_depth\nelse\n  return\nend\nchildren do |child|\n  if child\n    child.print_tree(level + 1, max_depth)\n  end\nend\n"}},{"id":"remove!(child)-instance-method","html_id":"remove!(child)-instance-method","name":"remove!","doc":"Removes the specified child node from this node.\n\nThis method can also be used for *pruning* a sub-tree, in cases where the removed child node is\nthe root of the sub-tree to be pruned.\n\nThe removed child node is orphaned but accessible if an alternate reference exists.  If accessible via\nan alternate reference, the removed child will report itself as a root node for its sub-tree.\n\n@param [TreeNode] child The child node to remove.\n\n@return [TreeNode] The removed child node, or +nil+ if a +nil+ was passed in as argument.","summary":"<p>Removes the specified child node from this node.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L288","def":{"name":"remove!","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if child\nelse\n  return nil\nend\n@children_hash.delete(child.name)\n@children.delete(child)\nchild.set_as_root!\nchild\n"}},{"id":"remove_from_parent!-instance-method","html_id":"remove_from_parent!-instance-method","name":"remove_from_parent!","doc":"Removes this node from its parent. This node becomes the new root for its\nsubtree.\n\nIf this is the root node, then does nothing.\n\n@return [TreeNode] +self+ (the removed node) if the operation is\n                               successful, +nil+ otherwise.","summary":"<p>Removes this node from its parent.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L192","def":{"name":"remove_from_parent!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\nelse\n  @parent.remove!(self)\nend"}},{"id":"rename(new_name)-instance-method","html_id":"rename(new_name)-instance-method","name":"rename","doc":"Renames the node and updates the parent's reference to it\n\n@param [Object] new_name Name of the node. Conventional usage is to pass a\n                         String (Integer names may cause *surprises*)\n\n@return [Object] The old name","summary":"<p>Renames the node and updates the parent's reference to it</p>","abstract":false,"args":[{"name":"new_name","doc":null,"default_value":"","external_name":"new_name","restriction":""}],"args_string":"(new_name)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L265","def":{"name":"rename","args":[{"name":"new_name","doc":null,"default_value":"","external_name":"new_name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"old_name = @name\nif is_root?\n  self.name = (  new_name)\nelse\n  @parent.rename_child(old_name, new_name)\nend\nold_name\n"}},{"id":"replace!(old_child,new_child)-instance-method","html_id":"replace!(old_child,new_child)-instance-method","name":"replace!","doc":"Replaces the specified child node with another child node on this node.\n\n@param [TreeNode] old_child The child node to be replaced.\n@param [TreeNode] new_child The child node to be replaced with.\n\n@return [TreeNode] The removed child node","summary":"<p>Replaces the specified child node with another child node on this node.</p>","abstract":false,"args":[{"name":"old_child","doc":null,"default_value":"","external_name":"old_child","restriction":""},{"name":"new_child","doc":null,"default_value":"","external_name":"new_child","restriction":""}],"args_string":"(old_child, new_child)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L97","def":{"name":"replace!","args":[{"name":"old_child","doc":null,"default_value":"","external_name":"old_child","restriction":""},{"name":"new_child","doc":null,"default_value":"","external_name":"new_child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"child_index = @children.index(old_child)\nold_child = remove!(old_child)\nadd(new_child, child_index)\nold_child\n"}},{"id":"replace_with(node)-instance-method","html_id":"replace_with(node)-instance-method","name":"replace_with","doc":"Replaces the node with another node\n\n@param [TreeNode] node The node to replace this node with\n\n@return [TreeNode] The replaced child node","summary":"<p>Replaces the node with another node</p>","abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"args_string":"(node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L151","def":{"name":"replace_with","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parent.replace!(self, node)"}},{"id":"root-instance-method","html_id":"root-instance-method","name":"root","doc":"Root node for the (sub)tree to which this node belongs.\nA root node's root is itself.\n\n@return [TreeNode] Root of the (sub)tree.","summary":"<p>Root node for the (sub)tree to which this node belongs.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L159","def":{"name":"root","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"root = self\nwhile !root.not_nil!.is_root?\n  root = root.not_nil!.parent\nend\nroot\n"}},{"id":"set_as_root!-instance-method","html_id":"set_as_root!-instance-method","name":"set_as_root!","doc":"Method to set this node as a root node.\n\n@return +nil+.","summary":"<p>Method to set this node as a root node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L170","def":{"name":"set_as_root!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.parent = nil"}},{"id":"siblings-instance-method","html_id":"siblings-instance-method","name":"siblings","doc":"An array of siblings for this node. This node is excluded.\n\n@return [Array<TreeNode>] Array of siblings of this node. Will\n                           return an empty array for *root*","summary":"<p>An array of siblings for this node.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/tree.cr#L492","def":{"name":"siblings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if is_root?\n  return [] of TreeNode\nend\nsiblings = [] of TreeNode\nif parent.nil?\n  raise(\"There are no siblings of the node/root node\")\nelse\n  parent.not_nil!.children do |my_sibling|\n    if my_sibling != self\n      siblings << my_sibling\n    end\n  end\n  siblings\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures/UnDirectedGraph","path":"Graphlb/DataStructures/UnDirectedGraph.html","kind":"class","full_name":"Graphlb::DataStructures::UnDirectedGraph","name":"UnDirectedGraph","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/undirectedgraph.cr","line_number":11,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DataStructures","kind":"module","full_name":"Graphlb::DataStructures","name":"DataStructures"},"doc":"An undirected graph is a graph that is made up of a set of vertices connected by edges,\nwhere the edges have a not direction and weight are associated with the edges.\n\nThe class provides various methods which can be used to define/modify a simple undirected graph with edge-weight\nAssociated to each edge. Here we are using the adjacency list approach to define a undirected graph which\ncan be modified later as per convience\n","summary":"<p>An undirected graph is a graph that is made up of a set of vertices connected by edges, where the edges have a not direction and weight are associated with the edges.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"creats a graph whith no vertices and edges(empty-graph)","summary":"<p>creats a graph whith no vertices and edges(empty-graph)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L17","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","html_id":"add_edge(from_node:Node,to_node:Node,weight)-instance-method","name":"add_edge","doc":"Creates an edge between the nodes provided as the parametes.\n\nIf the form_node and to_node_ are same then also the node is created witha cycle in the graph.\n\nIf any of the from_node or to_node is not found in the graph a exception is raised.\n\n@param : from_node\n\n@param : to_node\n\n@param : weight, the weight of the edge created\n\n@return : the list of all edges of the from_node","summary":"<p>Creates an edge between the nodes provided as the parametes.</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(from_node : Node, to_node : Node, weight)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L48","def":{"name":"add_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (from.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  from.add_edge(to_node, weight)\n  to.add_edge(from_node, weight)\nend\n"}},{"id":"add_vertex(name)-instance-method","html_id":"add_vertex(name)-instance-method","name":"add_vertex","doc":"Creates a new vertex with in the graph.\n\nThe vertex name is expected to be unique to differentiate between the vertex within the graph\nand perform operations on them.\n\n@param [String] name, to define the name of the vertex hwich is expected to be unique.\n\n@return [Vertex] newly created node.","summary":"<p>Creates a new vertex with in the graph.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L29","def":{"name":"add_vertex","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"temp = Node.new(name)\n@vertices << temp\nreturn temp\n"}},{"id":"get_vertices-instance-method","html_id":"get_vertices-instance-method","name":"get_vertices","doc":"returns informaton about all the vertices inside the graph\n\n@return : list of all vertices/nodes in the graph","summary":"<p>returns informaton about all the vertices inside the graph</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L91","def":{"name":"get_vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @vertices"}},{"id":"remove_edge(from_node:Node,to_node:Node)-instance-method","html_id":"remove_edge(from_node:Node,to_node:Node)-instance-method","name":"remove_edge","doc":"Removes the edge form the from_node to the to_node present in the graph\n\nIf the form_node and to_node_ are same and the edge is present between them the edge is removed\nelse excetion is raised\n\nIf any of the from_node or to_node is not found in the graph a exception is raised.\n\nIf edge between the from_node and the to_node is not found in the graph a exception is raised\n\n@param : from_node.\n\n@param : to_node.\n\n@return : list of all edges from the from node","summary":"<p>Removes the edge form the from_node to the to_node present in the graph</p>","abstract":false,"args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"args_string":"(from_node : Node, to_node : Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L73","def":{"name":"remove_edge","args":[{"name":"from_node","doc":null,"default_value":"","external_name":"from_node","restriction":"Node"},{"name":"to_node","doc":null,"default_value":"","external_name":"to_node","restriction":"Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"from = @vertices.find do |i|\n  i == from_node\nend\nto = @vertices.find do |i|\n  i == to_node\nend\nif (node.nil? || to.nil?)\n  raise(\"Node not found\")\nelse\n  if (  (from.edges.has_key?(to)) && (to.edges.has_key?(from)))\n    from.remove_edge(to_node)\n    to.remove_edge(from_node)\n  else\n    raise(\"edge not found\")\n  end\nend\n"}},{"id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","html_id":"vertices:Array(Graphlb::DataStructures::Node)-instance-method","name":"vertices","doc":"All the vertices of the graph are stored in this variables","summary":"<p>All the vertices of the graph are stored in this variables</p>","abstract":false,"args":[],"args_string":" : Array(Graphlb::DataStructures::Node)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/undirectedgraph.cr#L14","def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vertices"}}],"macros":[],"types":[]}]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT","path":"Graphlb/DOT.html","kind":"module","full_name":"Graphlb::DOT","name":"DOT","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/algorithms/dot.cr","line_number":3,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EDGE_OPTS","name":"EDGE_OPTS","value":"[\"arrowhead\", \"arrowsize\", \"arrowtail\", \"color\", \"comment\", \"constraint\", \"decorate\", \"dir\", \"fontcolor\", \"fontname\", \"fontsize\", \"headlabel\", \"headport\", \"headURL\", \"label\", \"labelangle\", \"labeldistance\", \"labelfloat\", \"labelfontcolor\", \"labelfontname\", \"labelfontsize\", \"layer\", \"lhead\", \"ltail\", \"minlen\", \"samehead\", \"sametail\", \"style\", \"taillabel\", \"tailport\", \"tailURL\", \"weight\", \"id\"]","doc":null,"summary":null},{"id":"GRAPH_OPTS","name":"GRAPH_OPTS","value":"[\"bgcolor\", \"center\", \"clusterrank\", \"color\", \"comment\", \"compound\", \"concentrate\", \"fillcolor\", \"fontcolor\", \"fontname\", \"fontpath\", \"fontsize\", \"label\", \"labeljust\", \"labelloc\", \"layers\", \"margin\", \"mclimit\", \"nodesep\", \"nslimit\", \"nslimit1\", \"ordering\", \"orientation\", \"page\", \"rank\", \"rankdir\", \"ranksep\", \"ratio\", \"samplepoints\", \"searchsize\", \"size\", \"style\", \"URL\", \"layerseq\"]","doc":null,"summary":null},{"id":"NODE_OPTS","name":"NODE_OPTS","value":"[\"color\", \"comment\", \"distortion\", \"fillcolor\", \"fixedsize\", \"fontcolor\", \"fontname\", \"fontsize\", \"group\", \"height\", \"label\", \"layer\", \"orientation\", \"peripheries\", \"regular\", \"shape\", \"shapefile\", \"sides\", \"skew\", \"style\", \"URL\", \"width\", \"z\", \"bottomlabel\", \"bgcolor\", \"rank\", \"toplabel\"]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb","kind":"module","full_name":"Graphlb","name":"Graphlb"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT/Directed","path":"Graphlb/DOT/Directed.html","kind":"class","full_name":"Graphlb::DOT::Directed","name":"Directed","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/dot.cr","line_number":126,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT","kind":"module","full_name":"Graphlb::DOT","name":"DOT"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"edge_link-instance-method","html_id":"edge_link-instance-method","name":"edge_link","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr#L128","def":{"name":"edge_link","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"->\""}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT/GraphDot","path":"Graphlb/DOT/GraphDot.html","kind":"class","full_name":"Graphlb::DOT::GraphDot","name":"GraphDot","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/dot.cr","line_number":134,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT","kind":"module","full_name":"Graphlb::DOT","name":"DOT"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(graph)-class-method","html_id":"new(graph)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"args_string":"(graph)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr#L136","def":{"name":"new","args":[{"name":"graph","doc":null,"default_value":"","external_name":"graph","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(graph)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"run_cmd(cmd)-instance-method","html_id":"run_cmd(cmd)-instance-method","name":"run_cmd","doc":null,"summary":null,"abstract":false,"args":[{"name":"cmd","doc":null,"default_value":"","external_name":"cmd","restriction":""}],"args_string":"(cmd)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr#L167","def":{"name":"run_cmd","args":[{"name":"cmd","doc":null,"default_value":"","external_name":"cmd","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"stdout = IO::Memory.new\nstderr = IO::Memory.new\nstatus = Process.run(cmd, output: stdout, error: stderr)\nif status.success?\n  {status.exit_code, stdout.to_s}\nelse\n  {status.exit_code, stderr.to_s}\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT/Undirected","path":"Graphlb/DOT/Undirected.html","kind":"class","full_name":"Graphlb::DOT::Undirected","name":"Undirected","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/algorithms/dot.cr","line_number":118,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Graphlb/DOT","kind":"module","full_name":"Graphlb::DOT","name":"DOT"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"edge_link-instance-method","html_id":"edge_link-instance-method","name":"edge_link","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/algorithms/dot.cr#L120","def":{"name":"edge_link","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"--\""}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/mettuaditya/graphlb/Radix","path":"Radix.html","kind":"module","full_name":"Radix","name":"Radix","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"graphlb/data_structures/radix_tree.cr","line_number":1,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mettuaditya/graphlb/Radix/Node","path":"Radix/Node.html","kind":"class","full_name":"Radix::Node(T)","name":"Node","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/radix_tree.cr","line_number":14,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/mettuaditya/graphlb/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Radix","kind":"module","full_name":"Radix","name":"Radix"},"doc":"A Node represents one element in the structure of a [Radix tree](https://en.wikipedia.org/wiki/Radix_tree)\n\nCarries a *payload* and might also contain references to other nodes\ndown in the organization inside *children*.\n\nEach node also carries identification in relation to the kind of key it\ncontains, which helps with characteristics of the node like named\nparameters or catch all kind (globbing).\n\nIs not expected direct usage of a node but instead manipulation via\nmethods within `Tree`.","summary":"<p>A Node represents one element in the structure of a <a href=\"https://en.wikipedia.org/wiki/Radix_tree\" target=\"_blank\">Radix tree</a></p>","class_methods":[],"constructors":[{"id":"new(key:String,payload:T?=nil,placeholder=false)-class-method","html_id":"new(key:String,payload:T?=nil,placeholder=false)-class-method","name":"new","doc":"Instantiate a Node\n\n- *key* - A `String` that represents this node.\n- *payload* - An optional payload for this node.\n\nWhen *payload* is not supplied, ensure the type of the node is provided\ninstead:\n\n```\n# Good, node type is inferred from payload (Symbol)\nnode = Radix::Node.new(\"/\", :root)\n\n# Good, node type is now Int32 but payload is optional\nnode = Radix::Node(Int32).new(\"/\")\n\n# Error, node type cannot be inferred (compiler error)\nnode = Radix::Node.new(\"/\")\n```","summary":"<p>Instantiate a Node</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"payload","doc":null,"default_value":"nil","external_name":"payload","restriction":"T | ::Nil"},{"name":"placeholder","doc":null,"default_value":"false","external_name":"placeholder","restriction":""}],"args_string":"(key : String, payload : T? = <span class=\"n\">nil</span>, placeholder = <span class=\"n\">false</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L70","def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"payload","doc":null,"default_value":"nil","external_name":"payload","restriction":"T | ::Nil"},{"name":"placeholder","doc":null,"default_value":"false","external_name":"placeholder","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Node(T).allocate\n_.initialize(key, payload, placeholder)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"(other:self)-instance-method","html_id":"(other:self)-instance-method","name":"<=>","doc":"Compares this node against *other*, returning `-1`, `0` or `1` depending\non whether this node differentiates from *other*.\n\nComparison is done combining node's `kind` and `priority`. Nodes of\nsame kind are compared by priority. Nodes of different kind are\nranked.\n\n### Normal nodes\n\n```\nnode1 = Radix::Node(Nil).new(\"a\")  # normal\nnode2 = Radix::Node(Nil).new(\"bc\") # normal\nnode1 <=> node2                    # => 1\n```\n\n### Normal vs named or glob nodes\n\n```\nnode1 = Radix::Node(Nil).new(\"a\")         # normal\nnode2 = Radix::Node(Nil).new(\":query\")    # named\nnode3 = Radix::Node(Nil).new(\"*filepath\") # glob\nnode1 <=> node2                           # => -1\nnode1 <=> node3                           # => -1\n```\n\n### Named vs glob nodes\n\n```\nnode1 = Radix::Node(Nil).new(\":query\")    # named\nnode2 = Radix::Node(Nil).new(\"*filepath\") # glob\nnode1 <=> node2                           # => -1\n```","summary":"<p>Compares this node against <em>other</em>, returning <code>-1</code>, <code>0</code> or <code>1</code> depending on whether this node differentiates from <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L106","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = kind <=> other.kind\nif result != 0\n  return result\nend\nother.priority <=> priority\n"}},{"id":"children-instance-method","html_id":"children-instance-method","name":"children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L28","def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children"}},{"id":"children=(children)-instance-method","html_id":"children=(children)-instance-method","name":"children=","doc":null,"summary":null,"abstract":false,"args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":""}],"args_string":"(children)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L32","def":{"name":"children=","args":[{"name":"children","doc":null,"default_value":"","external_name":"children","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children = children"}},{"id":"glob?-instance-method","html_id":"glob?-instance-method","name":"glob?","doc":"Returns `true` if the node key contains a glob parameter in it\n(catch all)\n\n```\nnode = Radix::Node(Nil).new(\"*filepath\")\nnode.glob? # => true\n\nnode = Radix::Node(Nil).new(\"abc\")\nnode.glob? # => false\n```","summary":"<p>Returns <code>true</code> if the node key contains a glob parameter in it (catch all)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L123","def":{"name":"glob?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"kind.glob?"}},{"id":"key-instance-method","html_id":"key-instance-method","name":"key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L24","def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key"}},{"id":"key=(key)-instance-method","html_id":"key=(key)-instance-method","name":"key=","doc":"Changes current *key*\n\n```\nnode = Radix::Node(Nil).new(\"a\")\nnode.key\n# => \"a\"\n\nnode.key = \"b\"\nnode.key\n# => \"b\"\n```\n\nThis will also result in change of node's `priority`\n\n```\nnode = Radix::Node(Nil).new(\"a\")\nnode.priority\n# => 1\n\nnode.key = \"abcdef\"\nnode.priority\n# => 6\n```","summary":"<p>Changes current <em>key</em></p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L150","def":{"name":"key=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key = key\n@kind = Kind::Normal\n@priority = compute_priority\n"}},{"id":"named?-instance-method","html_id":"named?-instance-method","name":"named?","doc":"Returns `true` if the node key contains a named parameter in it\n\n```\nnode = Radix::Node(Nil).new(\":query\")\nnode.named? # => true\n\nnode = Radix::Node(Nil).new(\"abc\")\nnode.named? # => false\n```","summary":"<p>Returns <code>true</code> if the node key contains a named parameter in it</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L165","def":{"name":"named?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"kind.named?"}},{"id":"normal?-instance-method","html_id":"normal?-instance-method","name":"normal?","doc":"Returns `true` if the node key does not contain an special parameter\n(named or glob)\n\n```\nnode = Radix::Node(Nil).new(\"a\")\nnode.normal? # => true\n\nnode = Radix::Node(Nil).new(\":query\")\nnode.normal? # => false\n```","summary":"<p>Returns <code>true</code> if the node key does not contain an special parameter (named or glob)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L179","def":{"name":"normal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"kind.normal?"}},{"id":"payload-instance-method","html_id":"payload-instance-method","name":"payload","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payload.not_nil!"}},{"id":"payload=(payload:T?)-instance-method","html_id":"payload=(payload:T?)-instance-method","name":"payload=","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"T | Nil"}],"args_string":"(payload : T?)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L27","def":{"name":"payload=","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"T | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payload = payload"}},{"id":"payload?-instance-method","html_id":"payload?-instance-method","name":"payload?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"payload?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payload"}},{"id":"placeholder?-instance-method","html_id":"placeholder?-instance-method","name":"placeholder?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L25","def":{"name":"placeholder?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@placeholder"}},{"id":"priority:Int32-instance-method","html_id":"priority:Int32-instance-method","name":"priority","doc":"Returns the priority of the Node based on it's *key*\n\nThis value will be directly associated to the key size up until a\nspecial elements is found.\n\n```\nRadix::Node(Nil).new(\"a\").priority\n# => 1\n\nRadix::Node(Nil).new(\"abc\").priority\n# => 3\n\nRadix::Node(Nil).new(\"/src/*filepath\").priority\n# => 5\n\nRadix::Node(Nil).new(\"/search/:query\").priority\n# => 8\n```","summary":"<p>Returns the priority of the Node based on it's <em>key</em></p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L52","def":{"name":"priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@priority"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Radix/Result","path":"Radix/Result.html","kind":"class","full_name":"Radix::Result(T)","name":"Result","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/radix_tree.cr","line_number":219,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Radix","kind":"module","full_name":"Radix","name":"Radix"},"doc":"A Result is the comulative output of walking our [Radix tree](https://en.wikipedia.org/wiki/Radix_tree)\n`Radix::Tree` implementation.\n\nIt provides helpers to retrieve the information obtained from walking\nour tree using `Radix::Tree#find`\n\nThis information can be used to perform actions in case of the *path*\nthat was looked on the Tree was found.\n\nA Result is also used recursively by `Radix::Tree#find` when collecting\nextra information like *params*.","summary":"<p>A Result is the comulative output of walking our <a href=\"https://en.wikipedia.org/wiki/Radix_tree\" target=\"_blank\">Radix tree</a> <code><a href=\"../Radix/Tree.html\">Radix::Tree</a></code> implementation.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"found?-instance-method","html_id":"found?-instance-method","name":"found?","doc":"Returns whatever a *payload* was found by `Tree#find` and is part of\nthe result.\n\n```\nresult = Radix::Result(Symbol).new\nresult.found?\n# => false\n\nroot = Radix::Node(Symbol).new(\"/\", :root)\nresult.use(root)\nresult.found?\n# => true\n```","summary":"<p>Returns whatever a <em>payload</em> was found by <code><a href=\"../Radix/Tree.html#find%28path%3AString%29-instance-method\">Tree#find</a></code> and is part of the result.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L244","def":{"name":"found?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"payload? ? true : false"}},{"id":"key-instance-method","html_id":"key-instance-method","name":"key","doc":"Returns a String built based on the nodes used in the result\n\n```\nnode1 = Radix::Node(Symbol).new(\"/\", :root)\nnode2 = Radix::Node(Symbol).new(\"about\", :about)\n\nresult = Radix::Result(Symbol).new\nresult.use node1\nresult.use node2\n\nresult.key\n# => \"/about\"\n```\n\nWhen no node has been used, returns an empty String.\n\n```\nresult = Radix::Result(Nil).new\nresult.key\n# => \"\"\n```","summary":"<p>Returns a String built based on the nodes used in the result</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L269","def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@key || (@key = (String.build do |io|\n  @nodes.each do |node|\n    io << node.key\n  end\nend))"}},{"id":"params-instance-method","html_id":"params-instance-method","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L222","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}},{"id":"payload-instance-method","html_id":"payload-instance-method","name":"payload","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L231","def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payload.not_nil!"}},{"id":"payload?-instance-method","html_id":"payload?-instance-method","name":"payload?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L227","def":{"name":"payload?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payload"}},{"id":"use(node:Radix::Node(T),payload=true)-instance-method","html_id":"use(node:Radix::Node(T),payload=true)-instance-method","name":"use","doc":"Adjust result information by using the details of the given `Node`.\n\n* Collect `Node` for future references.\n* Use *payload* if present.","summary":"<p>Adjust result information by using the details of the given <code><a href=\"../Radix/Node.html\">Node</a></code>.</p>","abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"},{"name":"payload","doc":null,"default_value":"true","external_name":"payload","restriction":""}],"args_string":"(node : Radix::Node(T), payload = <span class=\"n\">true</span>)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L283","def":{"name":"use","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"},{"name":"payload","doc":null,"default_value":"true","external_name":"payload","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@nodes << node\nif payload && node.payload?\n  @payload = node.payload\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mettuaditya/graphlb/Radix/Tree","path":"Radix/Tree.html","kind":"class","full_name":"Radix::Tree(T)","name":"Tree","abstract":false,"superclass":{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mettuaditya/graphlb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mettuaditya/graphlb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"graphlb/data_structures/radix_tree.cr","line_number":302,"url":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr"}],"repository_name":"github.com/mettuaditya/graphlb","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mettuaditya/graphlb/Radix","kind":"module","full_name":"Radix","name":"Radix"},"doc":"A [Radix tree](https://en.wikipedia.org/wiki/Radix_tree) implementation.\n\nIt allows insertion of *path* elements that will be organized inside\nthe tree aiming to provide fast retrieval options.\n\nEach inserted *path* will be represented by a `Node` or segmented and\ndistributed within the `Tree`.\n\nYou can associate a *payload* at insertion which will be return back\nat retrieval time.","summary":"<p>A <a href=\"https://en.wikipedia.org/wiki/Radix_tree\" target=\"_blank\">Radix tree</a> implementation.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L322","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Tree(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add(path:String,payload:T)-instance-method","html_id":"add(path:String,payload:T)-instance-method","name":"add","doc":"Inserts given *path* into the Tree\n\n* *path* - An `String` representing the pattern to be inserted.\n* *payload* - Required associated element for this path.\n\nIf no previous elements existed in the Tree, this will replace the\ndefined placeholder.\n\n```\ntree = Radix::Tree(Symbol).new\n\n# /         (:root)\ntree.add \"/\", :root\n\n# /         (:root)\n# \\-abc     (:abc)\ntree.add \"/abc\", :abc\n\n# /         (:root)\n# \\-abc     (:abc)\n#     \\-xyz (:xyz)\ntree.add \"/abcxyz\", :xyz\n```\n\nNodes inside the tree will be adjusted to accommodate the different\nsegments of the given *path*.\n\n```\ntree = Radix::Tree(Symbol).new\n\n# / (:root)\ntree.add \"/\", :root\n\n# /                   (:root)\n# \\-products/:id      (:product)\ntree.add \"/products/:id\", :product\n\n# /                    (:root)\n# \\-products/\n#           +-featured (:featured)\n#           \\-:id      (:product)\ntree.add \"/products/featured\", :featured\n```\n\nCatch all (globbing) and named parameters *path* will be located with\nlower priority against other nodes.\n\n```\ntree = Radix::Tree(Symbol).new\n\n# /           (:root)\ntree.add \"/\", :root\n\n# /           (:root)\n# \\-*filepath (:all)\ntree.add \"/*filepath\", :all\n\n# /           (:root)\n# +-about     (:about)\n# \\-*filepath (:all)\ntree.add \"/about\", :about\n```","summary":"<p>Inserts given <em>path</em> into the Tree</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"T"}],"args_string":"(path : String, payload : T)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L388","def":{"name":"add","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"root = @root\nif root.placeholder?\n  @root = Node(T).new(path, payload)\nelse\n  add(path, payload, root)\nend\n"}},{"id":"find(path:String)-instance-method","html_id":"find(path:String)-instance-method","name":"find","doc":"Returns a `Result` instance after walking the tree looking up for\n*path*\n\nIt will start walking the tree from the root node until a matching\nendpoint is found (or not).\n\n```\ntree = Radix::Tree(Symbol).new\ntree.add \"/about\", :about\n\nresult = tree.find \"/products\"\nresult.found?\n# => false\n\nresult = tree.find \"/about\"\nresult.found?\n# => true\n\nresult.payload\n# => :about\n```","summary":"<p>Returns a <code><a href=\"../Radix/Result.html\">Result</a></code> instance after walking the tree looking up for <em>path</em></p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L512","def":{"name":"find","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = Result(T).new\nroot = @root\nfind(path, result, root, first: true)\nresult\n"}},{"id":"root:Radix::Node(T)-instance-method","html_id":"root:Radix::Node(T)-instance-method","name":"root","doc":"Returns the root `Node` element of the Tree.\n\nOn a new tree instance, this will be a placeholder.","summary":"<p>Returns the root <code><a href=\"../Radix/Node.html\">Node</a></code> element of the Tree.</p>","abstract":false,"args":[],"args_string":" : Radix::Node(T)","source_link":"https://github.com/mettuaditya/graphlb/blob/20d0f1a6bae9c61d8e44179aaac11aae4131c853/src/graphlb/data_structures/radix_tree.cr#L322","def":{"name":"root","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T)","visibility":"Public","body":"@root"}}],"macros":[],"types":[]}]}]}}